"use client";

import { useState, useEffect } from "react";
import { useFakturaContext } from "../FakturaProvider";
import { bokf√∂rFaktura, h√§mtaBokf√∂ringsmetod, h√§mtaFakturaStatus } from "../actions";
import Tabell, { ColumnDefinition } from "../../_components/Tabell";
import Modal from "../../_components/Modal";

interface Bokf√∂rFakturaModalProps {
  isOpen: boolean;
  onClose: () => void;
}

interface Bokf√∂ringsPost {
  konto: string;
  kontoNamn: string;
  debet: number;
  kredit: number;
  beskrivning: string;
}

export default function Bokf√∂rFakturaModal({ isOpen, onClose }: Bokf√∂rFakturaModalProps) {
  const { formData } = useFakturaContext();
  const [loading, setLoading] = useState(false);
  const [bokf√∂ringsmetod, setBokf√∂ringsmetod] = useState<string>("kontantmetoden");
  const [fakturaStatus, setFakturaStatus] = useState<{
    status_betalning?: string;
    status_bokf√∂rd?: string;
  }>({});
  const [statusLoaded, setStatusLoaded] = useState(false);

  // H√§mta anv√§ndarens bokf√∂ringsmetod och fakturaSTATUS fr√•n databasen
  useEffect(() => {
    if (isOpen) {
      setStatusLoaded(false);
      h√§mtaBokf√∂ringsmetod().then(setBokf√∂ringsmetod);

      // H√§mta fakturaSTATUS om ID finns
      if (formData.id) {
        console.log("üîç H√§mtar status f√∂r faktura ID:", formData.id);
        h√§mtaFakturaStatus(parseInt(formData.id)).then((status) => {
          console.log("üìä Fakturasstatus:", status);
          setFakturaStatus(status);
          setStatusLoaded(true);
        });
      } else {
        console.log("‚ùå Inget faktura ID hittades");
        setStatusLoaded(true);
      }
    }
  }, [isOpen, formData.id]);

  if (!isOpen) return null;

  // Wait for status to be loaded before rendering the modal content
  if (!statusLoaded) {
    return (
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title={`üìä Bokf√∂r faktura ${formData.fakturanummer}`}
        maxWidth="4xl"
      >
        <div className="text-center py-8">
          <div className="text-white">‚è≥ Laddar fakturasstatus...</div>
        </div>
      </Modal>
    );
  }

  const √§rKontantmetod = bokf√∂ringsmetod === "kontantmetoden";

  // Analysera fakturan och f√∂resl√• bokf√∂ringsposter
  const analyseraBokf√∂ring = (): { poster: Bokf√∂ringsPost[]; varningar: string[] } => {
    const varningar: string[] = [];
    const poster: Bokf√∂ringsPost[] = [];

    // Validera grunddata
    if (!formData.artiklar || formData.artiklar.length === 0) {
      varningar.push("Fakturan saknar artiklar/tj√§nster");
      return { poster, varningar };
    }

    // Ber√§kna totalt belopp
    const totalExMoms = formData.artiklar.reduce(
      (sum, artikel) => sum + artikel.antal * artikel.prisPerEnhet,
      0
    );

    const totalMoms = formData.artiklar.reduce(
      (sum, artikel) => sum + (artikel.antal * artikel.prisPerEnhet * artikel.moms) / 100,
      0
    );

    const totalInkMoms = totalExMoms + totalMoms;

    if (totalInkMoms <= 0) {
      varningar.push("Fakturans totalbelopp √§r 0 eller negativt");
      return { poster, varningar };
    }

    // KONTROLLERA OM FAKTURAN REDAN √ÑR BOKF√ñRD
    console.log("üîç Kollar fakturaStatus:", fakturaStatus);
    if (fakturaStatus.status_bokf√∂rd && fakturaStatus.status_bokf√∂rd !== "Ej bokf√∂rd") {
      // Fakturan √§r redan bokf√∂rd - visa bara betalningsregistrering
      if (fakturaStatus.status_betalning !== "Betald") {
        poster.push({
          konto: "1930", // Bank/Kassa
          kontoNamn: "F√∂retagskonto/Bankkonto",
          beskrivning: `Betalning faktura ${formData.fakturanummer}`,
          debet: totalInkMoms,
          kredit: 0,
        });

        poster.push({
          konto: "1510",
          kontoNamn: "Kundfordringar",
          beskrivning: `Betalning faktura ${formData.fakturanummer}`,
          debet: 0,
          kredit: totalInkMoms,
        });

        varningar.push("‚ö†Ô∏è Fakturan √§r redan bokf√∂rd. Detta registrerar betalning.");
      } else {
        varningar.push("‚úÖ Fakturan √§r redan bokf√∂rd och betald.");
        return { poster, varningar };
      }

      return { poster, varningar };
    }

    // NORMAL BOKF√ñRING (om ej bokf√∂rd)
    // Avg√∂r om det √§r vara eller tj√§nst (majoriteten)
    const varor = formData.artiklar.filter((a) => a.typ === "vara").length;
    const tj√§nster = formData.artiklar.filter((a) => a.typ === "tj√§nst").length;

    let int√§ktskonto: string;
    let kontoNamn: string;

    if (varor > tj√§nster) {
      int√§ktskonto = "3001";
      kontoNamn = "F√∂rs√§ljning varor";
    } else if (tj√§nster > varor) {
      int√§ktskonto = "3011";
      kontoNamn = "F√∂rs√§ljning tj√§nster";
    } else {
      varningar.push("Oklart om det √§r varor eller tj√§nster - lika m√•nga av varje typ");
      int√§ktskonto = "3011"; // Default till tj√§nster
      kontoNamn = "F√∂rs√§ljning tj√§nster";
    }

    // Skapa bokf√∂ringsposter
    // 1. Kundfordran eller Bank/Kassa beroende p√• metod
    const skuld_tillg√•ngskonto = √§rKontantmetod ? "1930" : "1510";
    const skuld_tillg√•ngsnamn = √§rKontantmetod ? "Bank/Kassa" : "Kundfordringar";

    poster.push({
      konto: skuld_tillg√•ngskonto,
      kontoNamn: skuld_tillg√•ngsnamn,
      debet: totalInkMoms,
      kredit: 0,
      beskrivning: `Faktura ${formData.fakturanummer} ${formData.kundnamn}`,
    });

    // 2. Int√§kt (kredit)
    poster.push({
      konto: int√§ktskonto,
      kontoNamn: kontoNamn,
      debet: 0,
      kredit: totalExMoms,
      beskrivning: `Faktura ${formData.fakturanummer} ${formData.kundnamn}`,
    });

    // 3. Utg√•ende moms (kredit) - endast om det finns moms
    if (totalMoms > 0) {
      poster.push({
        konto: "2610",
        kontoNamn: "Utg√•ende moms 25%",
        debet: 0,
        kredit: totalMoms,
        beskrivning: `Moms faktura ${formData.fakturanummer}`,
      });
    }

    return { poster, varningar };
  };

  const { poster, varningar } = analyseraBokf√∂ring();

  // Kolumn-definitioner f√∂r tabellen
  const columns: ColumnDefinition<Bokf√∂ringsPost>[] = [
    {
      key: "konto",
      label: "Konto",
    },
    {
      key: "kontoNamn",
      label: "Kontonamn",
    },
    {
      key: "beskrivning",
      label: "Beskrivning",
    },
    {
      key: "debet",
      label: "Debet",
      render: (value) => (value > 0 ? value.toFixed(2) : ""),
    },
    {
      key: "kredit",
      label: "Kredit",
      render: (value) => (value > 0 ? value.toFixed(2) : ""),
    },
  ];

  // Anv√§nd poster direkt utan summa-rad
  const posterMedSumma = poster;
  const hanteraBokf√∂r = async () => {
    setLoading(true);
    try {
      // KOLLA OM FAKTURAN √ÑR SPARAD F√ñRST
      if (!formData.id) {
        alert("‚ùå Fakturan m√•ste sparas innan den kan bokf√∂ras!\n\nKlicka 'Spara faktura' f√∂rst.");
        setLoading(false);
        return;
      }

      const totalInkMoms =
        formData.artiklar?.reduce(
          (sum, artikel) => sum + artikel.antal * artikel.prisPerEnhet * (1 + artikel.moms / 100),
          0
        ) || 0;

      const result = await bokf√∂rFaktura({
        fakturaId: formData.id ? parseInt(formData.id) : undefined,
        fakturanummer: formData.fakturanummer,
        kundnamn: formData.kundnamn,
        totaltBelopp: totalInkMoms,
        poster: poster,
        kommentar: `Bokf√∂ring av faktura ${formData.fakturanummer} f√∂r ${formData.kundnamn}`,
      });

      console.log("üî• BOKF√ñR DATA:", {
        fakturaId: formData.id ? parseInt(formData.id) : undefined,
        formDataId: formData.id,
        fakturanummer: formData.fakturanummer,
      });

      if (result.success) {
        alert(`‚úÖ ${result.message}`);
        // Skicka event f√∂r att uppdatera fakturaslistan
        window.dispatchEvent(new Event("reloadFakturor"));
        onClose();
      } else {
        alert(`‚ùå Bokf√∂ringsfel: ${result.error}`);
      }
    } catch (error) {
      console.error("Bokf√∂ringsfel:", error);
      alert("‚ùå Fel vid bokf√∂ring");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={`üìä Bokf√∂r faktura ${formData.fakturanummer}`}
      maxWidth="4xl"
    >
      {/* Information */}
      {varningar.length > 0 && (
        <div className="mb-6 p-4 bg-blue-900/30 border border-blue-500/50 rounded">
          <h3 className="text-blue-400 font-semibold mb-2 flex items-center gap-2">
            üí° Information:
          </h3>
          <ul className="text-blue-200 space-y-1">
            {varningar.map((varning, index) => (
              <li key={index} className="flex items-start gap-2">
                <span className="text-blue-400 mt-0.5">‚Ä¢</span>
                <span>{varning.replace(/^‚ö†Ô∏è\s*/, "")}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Faktura-info */}
      <div className="mb-6 p-4 bg-slate-700 rounded">
        <h3 className="text-white font-semibold mb-2">Fakturanuppgifter:</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <span className="text-gray-400">Kund:</span>
            <span className="text-white ml-2">{formData.kundnamn}</span>
          </div>
          <div>
            <span className="text-gray-400">Fakturanummer:</span>
            <span className="text-white ml-2">{formData.fakturanummer}</span>
          </div>
          <div>
            <span className="text-gray-400">Antal artiklar:</span>
            <span className="text-white ml-2">{formData.artiklar?.length || 0}</span>
          </div>
          <div>
            <span className="text-gray-400">Totalt inkl. moms:</span>
            <span className="text-white ml-2">
              {formData.artiklar
                ?.reduce(
                  (sum, artikel) =>
                    sum + artikel.antal * artikel.prisPerEnhet * (1 + artikel.moms / 100),
                  0
                )
                .toFixed(2)}{" "}
              kr
            </span>
          </div>
        </div>
      </div>

      {/* Bokf√∂ringsposter */}
      {poster.length > 0 && (
        <div className="mb-6">
          <h3 className="text-white font-semibold mb-4">F√∂reslagna bokf√∂ringsposter:</h3>

          <Tabell
            data={posterMedSumma}
            columns={columns}
            getRowId={(item) => `${item.konto}-${item.beskrivning}`}
          />
        </div>
      )}

      {/* Knappar */}
      <div className="flex justify-end gap-4">
        <button
          onClick={onClose}
          className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
        >
          Avbryt
        </button>
        <button
          onClick={hanteraBokf√∂r}
          disabled={loading || poster.length === 0}
          className="px-6 py-2 bg-cyan-600 text-white rounded hover:bg-cyan-700 disabled:bg-gray-500 disabled:cursor-not-allowed flex items-center gap-2"
        >
          {loading ? (
            <>‚è≥ Bokf√∂r...</>
          ) : fakturaStatus.status_bokf√∂rd && fakturaStatus.status_bokf√∂rd !== "Ej bokf√∂rd" ? (
            <>üí∞ Registrera betalning</>
          ) : √§rKontantmetod ? (
            <>üìö Bokf√∂r betalning till Bank/Kassa</>
          ) : (
            <>üìö Bokf√∂r faktura till Kundfordringar</>
          )}
        </button>
      </div>

      {/* Info l√§ngst ner */}
      <div className="mt-4 text-xs text-slate-400 space-y-1">
        <div>
          Bokf√∂ringsmetod:{" "}
          <span className="text-white">
            {√§rKontantmetod ? "üí∞ Kontantmetod" : "üìÑ Fakturametoden"}
          </span>
        </div>
        <div>
          {/* Visa olika text beroende p√• vad som h√§nder */}
          {fakturaStatus.status_bokf√∂rd && fakturaStatus.status_bokf√∂rd !== "Ej bokf√∂rd"
            ? // Betalningsregistrering - fakturan √§r redan bokf√∂rd
              "üí∞ Int√§kten √§r redan registrerad, nu registreras betalningen."
            : √§rKontantmetod
              ? // Kontantmetod - int√§kt och betalning samtidigt
                "üí° Int√§kten och betalningen registreras samtidigt till Bank/Kassa."
              : // Fakturametoden - int√§kt f√∂rst, betalning senare
                "üí° Int√§kten registreras nu, betalning bokf√∂rs senare."}
        </div>
      </div>
    </Modal>
  );
}
