"use client";

import { useState, useEffect, useCallback } from "react";
import AnimeradFlik from "../../_components/AnimeradFlik";
import Knapp from "../../_components/Knapp";
import Lonespecar from "../Lonespecar/Lonespecar";
import { skapaNyL√∂nespec, taBortL√∂nespec, h√§mtaL√∂nespecifikationer } from "../actions";
import { useLonespecContext } from "../Lonespecar/LonespecContext";
import Forhandsgranskning from "../Lonespecar/Forhandsgranskning/Forhandsgranskning/Forhandsgranskning";
import MailaLonespec from "../Lonespecar/MailaLonespec";

export default function Anst√§lldaLista({
  anst√§llda,
  loading,
  utbetalningsdatum,
  onLonespecarChange,
}: {
  anst√§llda: any[];
  loading: boolean;
  utbetalningsdatum: Date | null;
  onLonespecarChange?: (specar: Record<string, any>) => void;
}) {
  const { setLonespecar } = useLonespecContext();
  const [sparar, setSparar] = useState<Record<string, boolean>>({});
  const [taBort, setTaBort] = useState<Record<string, boolean>>({});
  const [befintligaL√∂nespecar, setBefintligaL√∂nespecar] = useState<Record<string, any>>({});
  const [nyaL√∂nespecar, setNyaL√∂nespecar] = useState<Record<string, any>>({});
  const [laddaL√∂nespecar, setLaddaL√∂nespecar] = useState(false);
  const [f√∂rhandsgranskaId, setF√∂rhandsgranskaId] = useState<string | null>(null);
  const [f√∂rhandsgranskaData, setF√∂rhandsgranskaData] = useState<any | null>(null);
  const [batchMailModalOpen, setBatchMailModalOpen] = useState(false);
  const [bankgiroModalOpen, setBankgiroModalOpen] = useState(false);

  // Ber√§kna m√•nad/√•r fr√•n utbetalningsdatum
  const getL√∂neperiod = useCallback(() => {
    if (!utbetalningsdatum) return null;

    const utbetalning = new Date(utbetalningsdatum);
    const m√•nad = utbetalning.getMonth() + 1; // 1-12
    const √•r = utbetalning.getFullYear();

    // Anv√§nd samma m√•nad som valt datum
    return { m√•nad: m√•nad, √•r: √•r };
  }, [utbetalningsdatum]);

  // Ladda befintliga l√∂nespecar f√∂r vald period
  useEffect(() => {
    const laddaBefintligaL√∂nespecar = async () => {
      if (!utbetalningsdatum || anst√§llda.length === 0) return;

      const l√∂neperiod = getL√∂neperiod();
      if (!l√∂neperiod) return;

      try {
        setLaddaL√∂nespecar(true);
        const befintliga: Record<string, any> = {};

        for (const anst√§lld of anst√§llda) {
          const l√∂nespecar = await h√§mtaL√∂nespecifikationer(anst√§lld.id);
          const befintligL√∂nespec = l√∂nespecar.find(
            (spec: any) => spec.m√•nad === l√∂neperiod.m√•nad && spec.√•r === l√∂neperiod.√•r
          );

          if (befintligL√∂nespec) {
            befintliga[anst√§lld.id] = befintligL√∂nespec;
          }
        }

        setBefintligaL√∂nespecar(befintliga);
        setLonespecar(Object.values(befintliga));
        onLonespecarChange?.(befintliga);
      } catch (error) {
        console.error("‚ùå Fel vid laddning av l√∂nespecar:", error);
      } finally {
        setLaddaL√∂nespecar(false);
      }
    };

    laddaBefintligaL√∂nespecar();
  }, [anst√§llda, utbetalningsdatum, getL√∂neperiod, setLonespecar, onLonespecarChange]);

  const handleSkapaNyL√∂nespec = async (anst√§lld: any) => {
    if (!utbetalningsdatum) return;

    const l√∂neperiod = getL√∂neperiod();
    if (!l√∂neperiod) return;

    try {
      setSparar((prev) => ({ ...prev, [anst√§lld.id]: true }));

      const periodStart = new Date(l√∂neperiod.√•r, l√∂neperiod.m√•nad - 1, 1);
      const periodSlut = new Date(l√∂neperiod.√•r, l√∂neperiod.m√•nad, 0);

      const nyL√∂nespec = await skapaNyL√∂nespec({
        anst√§lld_id: anst√§lld.id,
        m√•nad: l√∂neperiod.m√•nad,
        √•r: l√∂neperiod.√•r,
        period_start: periodStart.toISOString().split("T")[0],
        period_slut: periodSlut.toISOString().split("T")[0],
      });

      setNyaL√∂nespecar((prev) => ({
        ...prev,
        [anst√§lld.id]: nyL√∂nespec,
      }));

      // üèñÔ∏è Visa semesterinformation om det lades till
      if (nyL√∂nespec.semesterInfo?.success && nyL√∂nespec.semesterInfo?.dagar > 0) {
        alert(`‚úÖ L√∂nespec skapad!\nüèñÔ∏è Semester: ${nyL√∂nespec.semesterInfo.message}`);
      } else {
        alert("‚úÖ L√∂nespec skapad!");
      }
    } catch (error) {
      console.error("Fel vid skapande av l√∂nespec:", error);
      alert("‚ùå Kunde inte skapa l√∂nespec");
    } finally {
      setSparar((prev) => ({ ...prev, [anst√§lld.id]: false }));
    }
  };

  const handleTaBortL√∂nespec = async (anst√§lld: any) => {
    const l√∂nespec = nyaL√∂nespecar[anst√§lld.id] || befintligaL√∂nespecar[anst√§lld.id];
    if (!l√∂nespec) return;

    if (!confirm("√Ñr du s√§ker p√• att du vill ta bort denna l√∂nespec?")) {
      return;
    }

    try {
      setTaBort((prev) => ({ ...prev, [anst√§lld.id]: true }));

      await taBortL√∂nespec(l√∂nespec.id);

      setNyaL√∂nespecar((prev) => {
        const nya = { ...prev };
        delete nya[anst√§lld.id];
        return nya;
      });

      setBefintligaL√∂nespecar((prev) => {
        const nya = { ...prev };
        delete nya[anst√§lld.id];
        return nya;
      });
    } catch (error) {
      console.error("Fel vid borttagning av l√∂nespec:", error);
      alert("‚ùå Kunde inte ta bort l√∂nespec");
    } finally {
      setTaBort((prev) => ({ ...prev, [anst√§lld.id]: false }));
    }
  };

  const harL√∂nespec = (anst√§lldId: string) => {
    return !!befintligaL√∂nespecar[anst√§lldId] || !!nyaL√∂nespecar[anst√§lldId];
  };

  const getL√∂nespec = (anst√§lldId: string) => {
    return nyaL√∂nespecar[anst√§lldId] || befintligaL√∂nespecar[anst√§lldId];
  };

  const l√∂neperiod = getL√∂neperiod();

  // Helper to build batch data for modal
  const batchL√∂nespecList = Object.values({ ...befintligaL√∂nespecar, ...nyaL√∂nespecar })
    .map((l√∂nespec: any) => {
      const anst = anst√§llda.find(
        (a) =>
          a.id === l√∂nespec.anst√§lld_id ||
          a.id === l√∂nespec.anstalld_id ||
          a.id === l√∂nespec.anst√§lld?.id
      );
      return {
        l√∂nespec,
        anst√§lld: anst,
        f√∂retagsprofil: {},
        extrarader: [],
        ber√§knadeV√§rden: {},
      };
    })
    .filter((item) => item.l√∂nespec && item.anst√§lld);

  return (
    <>
      <div className="flex justify-between items-center mb-3">
        <h5 className="text-white font-semibold">
          L√∂nek√∂rning {utbetalningsdatum?.toLocaleDateString("sv-SE")} ({anst√§llda.length}{" "}
          anst√§llda)
        </h5>
        {/* Batch action buttons removed from header area to avoid duplication */}
      </div>
      {loading || laddaL√∂nespecar ? (
        <div className="text-gray-300 text-center py-4">Laddar anst√§llda och l√∂nespecar...</div>
      ) : anst√§llda.length === 0 ? (
        <div className="text-gray-300 text-center py-4">Inga anst√§llda hittades</div>
      ) : (
        <div className="space-y-4">
          {anst√§llda.map((anst√§lld) => (
            <div key={anst√§lld.id} className="space-y-2">
              <AnimeradFlik
                title={`${anst√§lld.f√∂rnamn} ${anst√§lld.efternamn}`}
                icon="üë§"
                visaSummaDirekt={`${parseFloat(anst√§lld.kompensation || 0).toLocaleString("sv-SE")} kr`}
              >
                <div className="space-y-4">
                  {harL√∂nespec(anst√§lld.id) ? (
                    <>
                      <Lonespecar
                        anst√§lld={anst√§lld}
                        specificL√∂nespec={getL√∂nespec(anst√§lld.id)}
                        ingenAnimering={true}
                        visaExtraRader={true}
                      />
                      <div className="flex gap-2 mt-2 justify-between items-center">
                        <Knapp
                          text="üëÅÔ∏è F√∂rhandsgranska/PDF"
                          onClick={() => {
                            setF√∂rhandsgranskaId(anst√§lld.id);
                            setF√∂rhandsgranskaData({
                              l√∂nespec: getL√∂nespec(anst√§lld.id),
                              anst√§lld,
                              f√∂retagsprofil: {},
                              extrarader: [],
                              ber√§knadeV√§rden: {},
                            });
                          }}
                        />
                        <div className="flex-1" />
                        <Knapp
                          text="üóëÔ∏è Ta bort l√∂nespec"
                          loading={taBort[anst√§lld.id]}
                          onClick={() => handleTaBortL√∂nespec(anst√§lld)}
                        />
                      </div>
                    </>
                  ) : (
                    <div className="space-y-4">
                      <div className="flex justify-end">
                        <Knapp
                          text="‚úö Skapa ny l√∂nespec"
                          loading={sparar[anst√§lld.id]}
                          loadingText="‚è≥ Skapar..."
                          onClick={() => handleSkapaNyL√∂nespec(anst√§lld)}
                        />
                      </div>
                      <div className="text-gray-400 text-center py-4">
                        Ingen l√∂nespec f√∂r{" "}
                        {l√∂neperiod ? `${l√∂neperiod.m√•nad}/${l√∂neperiod.√•r}` : ""}
                      </div>
                    </div>
                  )}
                </div>
              </AnimeradFlik>
            </div>
          ))}
        </div>
      )}
      {/* F√∂rhandsgranskning-modal */}
      {f√∂rhandsgranskaId && f√∂rhandsgranskaData && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full p-6 relative">
            <button
              className="absolute top-2 right-2 text-2xl text-gray-500 hover:text-black"
              onClick={() => setF√∂rhandsgranskaId(null)}
              aria-label="St√§ng"
            >
              √ó
            </button>
            <Forhandsgranskning
              l√∂nespec={f√∂rhandsgranskaData.l√∂nespec}
              anst√§lld={f√∂rhandsgranskaData.anst√§lld}
              f√∂retagsprofil={f√∂rhandsgranskaData.f√∂retagsprofil}
              extrarader={f√∂rhandsgranskaData.extrarader}
              ber√§knadeV√§rden={f√∂rhandsgranskaData.ber√§knadeV√§rden}
              onSt√§ng={() => setF√∂rhandsgranskaId(null)}
            />
          </div>
        </div>
      )}
      {/* Batch-knappar under listan borttagna! */}
    </>
  );
}
