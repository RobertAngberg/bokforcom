"use client";

import { useState, useMemo, useEffect } from "react";
import Knapp from "../../_components/Knapp";
import { genereraBokf√∂ringsrader } from "../Bokf√∂ring/bokf√∂ringsLogik";
import { valideraBokf√∂ring, formateraBeloppKronor } from "../Bokf√∂ring/bokf√∂ringsUtils";
import { h√§mtaExtrarader } from "../actions";

interface Bokf√∂rProps {
  anst√§llda: any[];
  utbetalningsdatum: Date;
  l√∂nespecar: Record<string, any>;
}

export default function Bokf√∂rKnappOchModal({
  anst√§llda,
  utbetalningsdatum,
  l√∂nespecar,
  onClose,
}: Bokf√∂rProps & { onClose?: () => void }) {
  const [loading, setLoading] = useState(false);
  const [bokf√∂rLoading, setBokf√∂rLoading] = useState(false);
  // ‚úÖ STATE F√ñR F√ÑRSKA L√ñNESPECAR MED EXTRARADER
  const [f√§rskaLonespecar, setF√§rskaLonespecar] = useState<Record<string, any>>({});

  // L√§gg till en loading-state f√∂r f√§rsk data
  const [freshLoading, setFreshLoading] = useState(false);

  // Ber√§kna bokf√∂ringsdata FR√ÖN F√ÑRSKA L√ñNESPECAR
  const bokf√∂ringsData = useMemo(() => {
    const dataAttAnv√§nda = Object.keys(f√§rskaLonespecar).length > 0 ? f√§rskaLonespecar : l√∂nespecar;

    if (Object.keys(dataAttAnv√§nda).length === 0) return null;

    try {
      const summering = genereraBokf√∂ringsrader(dataAttAnv√§nda, anst√§llda);
      const valideringsresultat = valideraBokf√∂ring(summering);

      return {
        summering,
        fel: valideringsresultat,
        kanBokf√∂ra: valideringsresultat.length === 0,
      };
    } catch (error) {
      console.error("Fel vid ber√§kning av bokf√∂ring:", error);
      return null;
    }
    // L√§gg till efter rad 42:
    console.log("üîç BOKF√ñR MODAL - f√§rskaLonespecar:", f√§rskaLonespecar);
    console.log("üîç BOKF√ñR MODAL - l√∂nespecar:", l√∂nespecar);
    console.log(
      "üîç BOKF√ñR MODAL - dataAttAnv√§nda:",
      Object.keys(f√§rskaLonespecar).length > 0 ? f√§rskaLonespecar : l√∂nespecar
    );
  }, [f√§rskaLonespecar, l√∂nespecar, anst√§llda]);

  // ‚úÖ H√ÑMTA F√ÑRSK DATA N√ÑR MODALEN √ñPPNAS
  const hanteraBokf√∂r = async () => {
    setLoading(true);

    try {
      const uppdateradeLonespecar: Record<string, any> = {};

      // H√§mta f√§rska extrarader f√∂r varje l√∂nespec
      for (const anst√§lldId of Object.keys(l√∂nespecar)) {
        const l√∂nespec = l√∂nespecar[anst√§lldId];

        if (l√∂nespec?.id) {
          try {
            const extrarader = await h√§mtaExtrarader(l√∂nespec.id);

            uppdateradeLonespecar[anst√§lldId] = {
              ...l√∂nespec,
              extrarader: extrarader,
            };
          } catch (error) {
            console.error(`‚ùå Fel vid h√§mtning av extrarader f√∂r l√∂nespec ${l√∂nespec.id}:`, error);
            // Fallback till ursprunglig data
            uppdateradeLonespecar[anst√§lldId] = l√∂nespec;
          }
        } else {
          uppdateradeLonespecar[anst√§lldId] = l√∂nespec;
        }
      }

      setF√§rskaLonespecar(uppdateradeLonespecar);
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av f√§rsk data:", error);
      // Fallback - visa modal √§nd√• med gammal data
    } finally {
      setLoading(false);
    }
  };

  // H√§mta f√§rsk data varje g√•ng modalen √∂ppnas
  useEffect(() => {
    // Anta att modalen √§r √∂ppen om anst√§llda och l√∂nespecar finns
    if (anst√§llda.length > 0 && Object.keys(l√∂nespecar).length > 0) {
      setFreshLoading(true);
      // H√§mta extrarader f√∂r varje l√∂nespec och uppdatera state
      const fetchFreshLonespecar = async () => {
        const updated: Record<string, any> = {};
        for (const [id, spec] of Object.entries(l√∂nespecar)) {
          try {
            const extrarader = await h√§mtaExtrarader(spec.id);
            updated[id] = { ...spec, extrarader };
          } catch (err) {
            updated[id] = { ...spec, extrarader: spec.extrarader || [] };
          }
        }
        setF√§rskaLonespecar(updated);
        setFreshLoading(false);
      };
      fetchFreshLonespecar();
    }
  }, [anst√§llda, l√∂nespecar]);

  const hanteraBokf√∂rExekvering = async () => {
    if (!bokf√∂ringsData?.kanBokf√∂ra) return;

    setBokf√∂rLoading(true);

    try {
      // TODO: Implementera faktisk bokf√∂ring h√§r
      await new Promise((resolve) => setTimeout(resolve, 2000)); // Simulera API-anrop

      alert("‚úÖ Bokf√∂ring genomf√∂rd!");
      // ‚úÖ RENSA F√ÑRSKA DATA EFTER BOKF√ñRING
      setF√§rskaLonespecar({});
    } catch (error) {
      console.error("Fel vid bokf√∂ring:", error);
      alert("‚ùå Fel vid bokf√∂ring!");
    } finally {
      setBokf√∂rLoading(false);
    }
  };

  // Visa loading tills f√§rsk data √§r h√§mtad
  if (freshLoading) {
    return <div className="p-8 text-center text-white">H√§mtar f√§rsk l√∂neinformation...</div>;
  }

  // Logga aktuell data innan summering
  console.log("BOKF√ñR MODAL - anst√§llda:", anst√§llda);
  console.log("BOKF√ñR MODAL - l√∂nespecar:", l√∂nespecar);
  console.log("BOKF√ñR MODAL - f√§rskaLonespecar:", f√§rskaLonespecar);
  // Logga summering och bokf√∂ringsrader f√∂r fels√∂kning
  if (bokf√∂ringsData) {
    console.log("BOKF√ñRINGS-SUMMERING:", bokf√∂ringsData.summering);
    if (bokf√∂ringsData.summering?.rader) {
      bokf√∂ringsData.summering.rader.forEach((rad: any) => {
        console.log("Rad:", rad);
      });
    }
    console.log("Total debet:", bokf√∂ringsData.summering?.totalDebet);
    console.log("Total kredit:", bokf√∂ringsData.summering?.totalKredit);
    console.log("Balanserar:", bokf√∂ringsData.summering?.balanserar);
    if (bokf√∂ringsData.fel && bokf√∂ringsData.fel.length > 0) {
      console.log("Fel:", bokf√∂ringsData.fel);
    }
  }

  // Logga l√∂nespecar och bruttol√∂n innan summering
  Object.values(l√∂nespecar).forEach((spec: any) => {
    console.log("L√ñNESPEC:", spec);
    console.log("Bruttol√∂n:", spec.bruttol√∂n);
  });

  return (
    <>
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col">
          {/* HEADER */}
          <div className="flex justify-between items-center p-6 border-b border-gray-700">
            <h3 className="text-xl font-semibold text-white">
              üìä Bokf√∂ring - {utbetalningsdatum.toLocaleDateString("sv-SE")}
            </h3>
            <button onClick={onClose} className="text-gray-400 hover:text-white text-2xl">
              ‚úï
            </button>
          </div>

          {/* INNEH√ÖLL */}
          <div className="flex-1 overflow-y-auto p-6">
            {!bokf√∂ringsData ? (
              <div className="text-center text-gray-400 py-8">
                <p>‚ùå Kunde inte ber√§kna bokf√∂ring</p>
                <p className="text-sm mt-2">Kontrollera att l√∂nespecar √§r korrekta</p>
              </div>
            ) : (
              <div className="space-y-6">
                {/* SAMMANFATTNING */}
                <div className="bg-gray-700 rounded-lg p-4">
                  <h4 className="text-lg font-semibold text-white mb-3">üìã Sammanfattning</h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="text-gray-400">Antal anst√§llda:</span>
                      <span className="text-white ml-2 font-medium">{anst√§llda.length}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Total debet:</span>
                      <span className="text-white ml-2 font-medium">
                        {formateraBeloppKronor(bokf√∂ringsData.summering.totalDebet)}
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-400">Total kredit:</span>
                      <span className="text-white ml-2 font-medium">
                        {formateraBeloppKronor(bokf√∂ringsData.summering.totalKredit)}
                      </span>
                    </div>
                  </div>

                  {/* BALANSSTATUS */}
                  <div className="mt-3 pt-3 border-t border-gray-600">
                    {bokf√∂ringsData.summering.balanserar ? (
                      <div className="flex items-center text-green-400">
                        <span className="mr-2">‚úÖ</span>
                        <span>Bokf√∂ringen balanserar</span>
                      </div>
                    ) : (
                      <div className="flex items-center text-red-400">
                        <span className="mr-2">‚ùå</span>
                        <span>Bokf√∂ringen balanserar INTE</span>
                      </div>
                    )}
                  </div>
                </div>

                {/* FELMEDDELANDEN */}
                {bokf√∂ringsData.fel.length > 0 && (
                  <div className="bg-red-900/20 border border-red-600 rounded-lg p-4">
                    <h4 className="text-lg font-semibold text-red-400 mb-3">
                      ‚ùå Fel som m√•ste √•tg√§rdas
                    </h4>
                    <ul className="space-y-1 text-red-300 text-sm">
                      {bokf√∂ringsData.fel.map((fel, index) => (
                        <li key={index}>‚Ä¢ {fel}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* BOKF√ñRINGSTABELL */}
                <div className="bg-gray-700 rounded-lg overflow-hidden">
                  <h4 className="text-lg font-semibold text-white p-4 bg-gray-600">
                    üìä Bokf√∂ringsrader
                  </h4>

                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead className="bg-gray-600">
                        <tr>
                          <th className="text-left p-3 text-gray-300 font-medium">Konto</th>
                          <th className="text-left p-3 text-gray-300 font-medium">Kontonamn</th>
                          <th className="text-right p-3 text-gray-300 font-medium">Debet</th>
                          <th className="text-right p-3 text-gray-300 font-medium">Kredit</th>
                        </tr>
                      </thead>
                      <tbody>
                        {bokf√∂ringsData.summering.rader.map((rad, index) => (
                          <tr
                            key={index}
                            className={`border-b border-gray-600 ${
                              index % 2 === 0 ? "bg-gray-750" : "bg-gray-700"
                            }`}
                          >
                            <td className="p-3 text-white">{rad.konto}</td>
                            <td className="p-3 text-gray-300">{rad.kontoNamn}</td>
                            <td className="p-3 text-right text-white">
                              {rad.debet > 0 ? formateraBeloppKronor(rad.debet) : "-"}
                            </td>
                            <td className="p-3 text-right text-white">
                              {rad.kredit > 0 ? formateraBeloppKronor(rad.kredit) : "-"}
                            </td>
                          </tr>
                        ))}
                      </tbody>

                      {/* SUMMERINGSRAD */}
                      <tfoot className="bg-gray-600 border-t-2 border-gray-500">
                        <tr>
                          <td className="p-3 text-white font-semibold" colSpan={2}>
                            SUMMA
                          </td>
                          <td className="p-3 text-right text-white font-semibold">
                            {formateraBeloppKronor(bokf√∂ringsData.summering.totalDebet)}
                          </td>
                          <td className="p-3 text-right text-white font-semibold">
                            {formateraBeloppKronor(bokf√∂ringsData.summering.totalKredit)}
                          </td>
                        </tr>
                      </tfoot>
                    </table>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* FOOTER MED KNAPPAR */}
          <div className="p-6 border-t border-gray-700 flex justify-between">
            <Knapp text="St√§ng" onClick={onClose} />

            <Knapp
              text="üìä Genomf√∂r bokf√∂ring"
              onClick={hanteraBokf√∂rExekvering}
              loading={bokf√∂rLoading}
              loadingText="‚è≥ Bokf√∂r..."
              disabled={!bokf√∂ringsData?.kanBokf√∂ra}
            />
          </div>
        </div>
      </div>
    </>
  );
}
