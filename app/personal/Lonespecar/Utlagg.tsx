//#region Huvud
import { l√§ggTillUtl√§ggSomExtrarad, uppdateraUtl√§ggStatus } from "../actions";
import { useEffect, useState } from "react";
import Knapp from "../../_components/Knapp";

interface Utl√§ggProps {
  l√∂nespecUtl√§gg: any[];
  getStatusBadge: (status: string) => React.ReactElement;
  l√∂nespecId?: number;
  onUtl√§ggAdded?: (tillagdaUtl√§gg: any[], extraradResults: any[]) => Promise<void>; // Uppdaterad callback
  extrarader?: any[]; // L√§gg till extrarader f√∂r synkronisering
}

export default function Utl√§gg({
  l√∂nespecUtl√§gg,
  getStatusBadge,
  l√∂nespecId,
  onUtl√§ggAdded,
  extrarader = [],
}: Utl√§ggProps) {
  //#endregion

  const [synkroniseradeUtl√§gg, setSynkroniseradeUtl√§gg] = useState<any[]>(l√∂nespecUtl√§gg);
  const [l√§ggerTillUtl√§gg, setL√§ggerTillUtl√§gg] = useState(false);

  // Synkronisera utl√§ggstatus med faktiska extrarader
  useEffect(() => {
    const synkronisera = async () => {
      const uppdateradeUtl√§gg = await Promise.all(
        l√∂nespecUtl√§gg.map(async (utl√§gg) => {
          // Kolla om utl√§gget faktiskt finns i extrarader
          const finnsIExtrarader = extrarader.some((extrarad) => {
            // Matcha baserat p√• beskrivning och belopp
            const beskrivningsMatch =
              extrarad.kolumn1?.includes(utl√§gg.beskrivning) ||
              extrarad.kolumn1?.includes(`Utl√§gg - ${utl√§gg.datum}`);
            const beloppMatch = Math.abs(parseFloat(extrarad.kolumn3) - utl√§gg.belopp) < 0.01;

            return beskrivningsMatch && beloppMatch;
          });

          // Om utl√§gget √§r markerat som "Inkluderat" men inte finns i extrarader
          if (utl√§gg.status === "Inkluderat i l√∂nespec" && !finnsIExtrarader) {
            // √Öterst√§ll till "V√§ntande" i databasen
            await uppdateraUtl√§ggStatus(utl√§gg.id, "V√§ntande");
            return { ...utl√§gg, status: "V√§ntande" };
          }

          return utl√§gg;
        })
      );

      setSynkroniseradeUtl√§gg(uppdateradeUtl√§gg);
    };

    if (l√∂nespecUtl√§gg.length > 0 && extrarader.length >= 0) {
      synkronisera();
    }
  }, [l√∂nespecUtl√§gg, extrarader]);

  const handleL√§ggTillUtl√§gg = async () => {
    if (!l√∂nespecId) {
      alert("‚ùå Fel: Ingen l√∂nespec ID hittades");
      return;
    }

    const v√§ntandeUtl√§gg = synkroniseradeUtl√§gg.filter((u) => u.status === "V√§ntande");

    if (v√§ntandeUtl√§gg.length === 0) {
      alert("Inga v√§ntande utl√§gg att l√§gga till");
      return;
    }

    setL√§ggerTillUtl√§gg(true);
    try {
      const extraradResults = [];
      for (const utl√§gg of v√§ntandeUtl√§gg) {
        // Enkel, tydlig funktion - spara resultatet
        const result = await l√§ggTillUtl√§ggSomExtrarad(l√∂nespecId, utl√§gg);
        extraradResults.push(result);
        await uppdateraUtl√§ggStatus(utl√§gg.id, "Inkluderat i l√∂nespec");
      }
      alert(`${v√§ntandeUtl√§gg.length} utl√§gg tillagda!`);

      // Uppdatera UI genom callback - skicka b√•de utl√§gg och resultat
      if (onUtl√§ggAdded) {
        await onUtl√§ggAdded(v√§ntandeUtl√§gg, extraradResults);
      }
    } catch (error) {
      console.error("Fel:", error);
      alert("N√•got gick fel!");
    } finally {
      setL√§ggerTillUtl√§gg(false);
    }
  };

  if (synkroniseradeUtl√§gg.length === 0) return null;

  // Visa komponenten om det finns utl√§gg (v√§ntande eller inkluderade)
  const v√§ntandeUtl√§gg = synkroniseradeUtl√§gg.filter((u) => u.status === "V√§ntande");
  const inkluderadeUtl√§gg = synkroniseradeUtl√§gg.filter(
    (u) => u.status === "Inkluderat i l√∂nespec"
  );

  return (
    <div className="bg-slate-700 p-4 rounded-lg">
      <h4 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
        üí∞ V√§ntande utl√§gg
      </h4>
      {/* L√§gg till utl√§gg knapp i mitten */}
      {v√§ntandeUtl√§gg.length > 0 && (
        <div className="flex justify-center mb-4">
          <Knapp
            text="üí∞ L√§gg till v√§ntande utl√§gg"
            onClick={handleL√§ggTillUtl√§gg}
            loading={l√§ggerTillUtl√§gg}
            loadingText="L√§gger till utl√§gg..."
            disabled={l√§ggerTillUtl√§gg}
          />
        </div>
      )}
      <div className="space-y-3">
        {synkroniseradeUtl√§gg.map((utl√§ggItem) => (
          <div key={utl√§ggItem.id} className="bg-slate-800 p-3 rounded-lg">
            <div className="flex justify-between items-start mb-2">
              <div>
                <h5 className="text-white font-medium">{utl√§ggItem.beskrivning}</h5>
                <p className="text-gray-400 text-sm">
                  {new Date(utl√§ggItem.datum).toLocaleDateString("sv-SE")}
                  {utl√§ggItem.kategori && ` ‚Ä¢ ${utl√§ggItem.kategori}`}
                </p>
              </div>
              <div className="text-right">
                <div className="text-white font-bold">
                  {utl√§ggItem.belopp.toLocaleString("sv-SE")} kr
                </div>
                {getStatusBadge(utl√§ggItem.status)}
              </div>
            </div>

            {utl√§ggItem.kommentar && (
              <div className="text-gray-400 text-sm mb-2">{utl√§ggItem.kommentar}</div>
            )}

            <div className="flex justify-between items-center text-xs text-gray-500">
              <span>ID: #{utl√§ggItem.id}</span>
              {utl√§ggItem.kvitto_fil && <span>üìé Kvitto: {utl√§ggItem.kvitto_fil}</span>}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
