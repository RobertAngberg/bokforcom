import { RAD_KONFIGURATIONER } from "./Extrarader/extraradDefinitioner";
import { SKATTETABELL_34_1_2025 } from "../skattetabell34";

// Om semestertill√§gg ‚Äì kortfattat:

// Vad: Ett extra till√§gg (minst 0,43‚ÄØ% av m√•nadsl√∂nen per semesterdag) som betalas ut n√§r anst√§llda tar semester.
// Skatt: Semestertill√§gg √§r skattepliktigt och ska beskattas som vanlig l√∂n.
// Syfte: Ger extra pengar under semestern ut√∂ver ordinarie l√∂n.

// S√• funkar det i koden:
// I extrarad-konfigurationen har semestertill√§gg l√§ggTillIBruttol√∂n: true.
// Vid l√∂neber√§kning summeras alla extrarader med denna flagga direkt till bruttol√∂nen.
// Skatt och sociala avgifter ber√§knas p√• bruttol√∂nen inklusive semestertill√§gg.
// Ingen h√•rdkodning ‚Äì det styrs helt av flaggan i konfigurationen.

//#region Huvud

export interface L√∂neBer√§kning {
  grundl√∂n: number;
  till√§gg: number;
  avdrag: number;
  bruttol√∂n: number;
  socialaAvgifter: number;
  skatt: number;
  nettol√∂n: number;
  totalL√∂nekostnad: number;
}

export interface L√∂neKontrakt {
  m√•nadsl√∂n: number;
  arbetstimmarPerVecka: number;
  skattetabell: string;
  skattekolumn: number;
  kommunalSkatt: number;
  socialaAvgifterSats: number;
}

export interface DagAvdrag {
  f√∂r√§ldraledighet: number;
  v√•rdAvSjuktBarn: number;
  sjukfr√•nvaro: number;
}

export type BilTyp = "bensinDiesel" | "el";

export interface Extrarad {
  kolumn1: string; // Ben√§mning
  kolumn2: string; // Antal
  kolumn3: string; // Belopp
  kolumn4?: string; // Kommentar
}
//#endregion

// =====================================================================================
// üî¢ KONSTANTER OCH SATSER
// =====================================================================================

/**
 * Bokios officiella konstanter
 */
export const BOKIO_KONSTANTER = {
  DAGL√ñN_PROCENT: 0.046,
  SJUKL√ñN_PROCENT: 0.8,
  KARENSAVDRAG_PROCENT: 0.2,
  SEMESTERL√ñN_PROCENT: 0.0043,
  SEMESTERERS√ÑTTNING_PROCENT: 0.12,
  VECKOR_PER_√ÖR: 52,
  M√ÖNADER_PER_√ÖR: 12,
  STANDARD_ARBETSTIMMAR_PER_VECKA: 40,
  // Semesterkonstanter
  SEMESTERDAGAR_PER_√ÖR: 25,
  ARBETSDAGAR_PER_M√ÖNAD: 21.75, // Genomsnitt
} as const;

/**
 * Skattetabeller fr√•n actions.ts + Formler-mappen konsoliderade
 */
const SKATTESATSER: { [key: number]: number } = {
  29: 0.18,
  30: 0.2,
  31: 0.21974,
  32: 0.24,
  33: 0.26,
  34: 0.21974,
  35: 0.3,
  36: 0.32,
  37: 0.34,
  38: 0.36,
  39: 0.38,
  40: 0.4,
  41: 0.42,
  42: 0.44,
};

/**
 * Skattetabeller f√∂r olika inkomstniv√•er (fr√•n konstanter.ts)
 */
export const SKATTETABELLER = {
  h√∂g: { min: 35000, sats: 0.21974 },
  medel: { min: 31500, sats: 0.215 },
  l√•g: { min: 30000, sats: 0.205 },
  grund: { min: 0, sats: 0.19 },
} as const;

/**
 * Sociala avgifter konstant
 */
const SOCIAL_AVGIFT_SATS = 0.3142; // 31.42%

/**
 * Bilers√§ttning per km
 */
export const BILERS√ÑTTNING_SATSER = {
  bensinDiesel: 2.85, // kr per km
  el: 1.2, // kr per km
} as const;

/**
 * Lista √∂ver skattepliktiga f√∂rm√•ner och till√§gg
 */
const SKATTEPLIKTIGA_POSTER = [
  "f√∂rs√§kring",
  "boende",
  "gratis frukost",
  "gratis lunch eller middag",
  "gratis mat",
  "parkering",
  "f√∂retagsbil",
  "annan f√∂rm√•n",
  "r√§ntef√∂rm√•n",
  "l√∂n",
  "√∂vertid",
  "ob-till√§gg",
  "risktill√§gg",
  "semestertill√§gg",
] as const;

// =====================================================================================
// üßÆ GRUNDL√ÑGGANDE BER√ÑKNINGAR
// =====================================================================================

/**
 * Ber√§knar dagl√∂n enligt Bokios formel
 * Bokio: 1 dag = 4,6% av m√•nadsl√∂n
 */
export function ber√§knaDagl√∂n(m√•nadsl√∂n: number): number {
  return m√•nadsl√∂n / 21.75;
}

/**
 * Ber√§knar timl√∂n enligt Bokios formel
 * Bokio: m√•nadsl√∂n √ó 12 / (52 √ó arbetstimmar per vecka)
 */
export function ber√§knaTiml√∂n(m√•nadsl√∂n: number, arbetstimmarPerVecka: number = 40): number {
  return (
    (m√•nadsl√∂n * BOKIO_KONSTANTER.M√ÖNADER_PER_√ÖR) /
    (BOKIO_KONSTANTER.VECKOR_PER_√ÖR * arbetstimmarPerVecka)
  );
}

/**
 * Ber√§knar veckol√∂n enligt Bokios formel
 * Bokio: √•rsl√∂n / 52 veckor
 */
export function ber√§knaVeckol√∂n(m√•nadsl√∂n: number): number {
  return (m√•nadsl√∂n * BOKIO_KONSTANTER.M√ÖNADER_PER_√ÖR) / BOKIO_KONSTANTER.VECKOR_PER_√ÖR;
}

/**
 * Ber√§knar karensavdrag enligt Bokios formel
 * Bokio: 20% av veckosjukl√∂n (som √§r 80% av veckol√∂n)
 */
export function ber√§knaKarensavdrag(m√•nadsl√∂n: number): number {
  const veckol√∂n = ber√§knaVeckol√∂n(m√•nadsl√∂n);
  const veckosjukl√∂n = veckol√∂n * BOKIO_KONSTANTER.SJUKL√ñN_PROCENT;
  return veckosjukl√∂n * BOKIO_KONSTANTER.KARENSAVDRAG_PROCENT;
}

/**
 * Ber√§knar semesterl√∂n enligt Bokios formel
 * Bokio: 0,43% av m√•nadsl√∂n per dag
 */
export function ber√§knaSemesterL√∂n(m√•nadsl√∂n: number, dagar: number): number {
  return m√•nadsl√∂n * BOKIO_KONSTANTER.SEMESTERL√ñN_PROCENT * dagar;
}

/**
 * Ber√§knar semesterers√§ttning enligt Bokios formel
 * Bokio: 12% av semesterl√∂n
 */
export function ber√§knaSemesterers√§ttning(semesterl√∂n: number): number {
  return semesterl√∂n * BOKIO_KONSTANTER.SEMESTERERS√ÑTTNING_PROCENT;
}

/**
 * Ber√§knar semesterl√∂n per dag enligt procentregeln (Verksamt)
 * 12% av √•rsl√∂n f√∂r 25 dagar = 0,48% av √•rsl√∂n per dag
 * F√∂r m√•nadsl√∂n: √•rsl√∂n = m√•nadsl√∂n √ó 12
 */
export function ber√§knaSemesterl√∂nPerDag(m√•nadsl√∂n: number): number {
  const √•rsl√∂n = m√•nadsl√∂n * 12;
  return √•rsl√∂n * 0.0048; // 0,48% av √•rsl√∂nen per semesterdag
}

/**
 * Ber√§knar bilers√§ttning enligt Bokios formel
 * Bokio: Olika satser f√∂r olika biltyper
 */
export function ber√§knaBilers√§ttning(bilTyp: BilTyp, kilometer: number): number {
  return kilometer * BILERS√ÑTTNING_SATSER[bilTyp];
}

/**
 * Ber√§knar semesterpenning f√∂r ett uttag
 */
export function ber√§knaSemesterpenning(
  m√•nadsl√∂n: number,
  dagar: number
): {
  semesterl√∂n: number;
  semesterers√§ttning: number;
  totalt: number;
} {
  const semesterl√∂n = m√•nadsl√∂n * 0.0043 * dagar;
  const semesterers√§ttning = semesterl√∂n * 0.12;
  return {
    semesterl√∂n,
    semesterers√§ttning,
    totalt: semesterl√∂n + semesterers√§ttning,
  };
}

/**
 * Alias-funktioner f√∂r bak√•tkompatibilitet
 */
export function ber√§knaObetaldDag(m√•nadsl√∂n: number): number {
  return ber√§knaDagl√∂n(m√•nadsl√∂n);
}

export function ber√§knaSjukavdrag(m√•nadsl√∂n: number): number {
  return ber√§knaDagl√∂n(m√•nadsl√∂n);
}

export function ber√§knaF√∂r√§ldraledighetavdrag(m√•nadsl√∂n: number): number {
  return ber√§knaDagl√∂n(m√•nadsl√∂n);
}

export function ber√§knaV√•rdavdrag(m√•nadsl√∂n: number): number {
  return ber√§knaDagl√∂n(m√•nadsl√∂n);
}

// =====================================================================================
// ÔøΩ NYTT: KLASSIFICERA EXTRARADER FLEXIBELT
// =====================================================================================

/**
 * Klassificerar extrarader enligt konfigurationens flaggor.
 * Summerar till r√§tt kategori f√∂r loneberokningarna.
 */
export function klassificeraExtrarader(extrarader: any[]) {
  let bruttol√∂nTill√§gg = 0;
  let skattepliktigaF√∂rm√•ner = 0;
  let skattefriaErs√§ttningar = 0;
  let √∂vrigaTill√§gg = 0;
  let nettol√∂nejustering = 0;

  extrarader.forEach((rad) => {
    const konfig = RAD_KONFIGURATIONER[rad.typ];
    const belopp = parseFloat(rad.kolumn3) || 0;

    if (konfig?.l√§ggTillINettol√∂n) {
      nettol√∂nejustering += belopp;
    } else if (konfig?.l√§ggTillIBruttol√∂n) {
      bruttol√∂nTill√§gg += belopp;
    } else if (konfig?.skattepliktig === true) {
      skattepliktigaF√∂rm√•ner += belopp;
    } else if (konfig?.skattepliktig === false) {
      skattefriaErs√§ttningar += belopp;
    } else {
      √∂vrigaTill√§gg += belopp;
    }
  });

  return {
    bruttol√∂nTill√§gg,
    skattepliktigaF√∂rm√•ner,
    skattefriaErs√§ttningar,
    √∂vrigaTill√§gg,
    // nettol√∂nejustering,
  };
}

// =====================================================================================
// ÔøΩüí∞ L√ñNEKONVERTERING (fr√•n actions.ts)
// =====================================================================================

/**
 * Konverterar olika l√∂netyper till m√•nadsl√∂n
 * Flyttad fr√•n actions.ts rad 834-877
 */
export function konverteraL√∂n(
  kompensation: number,
  ers√§ttningPer: string,
  arbetsveckaTimmar: number = 40,
  deltidProcent?: number
): number {
  let grundl√∂n = 0;

  switch (ers√§ttningPer) {
    case "M√•nad":
      grundl√∂n = kompensation;
      break;
    case "√Ör":
      grundl√∂n = kompensation / 12;
      break;
    case "Timme":
      grundl√∂n = (kompensation * arbetsveckaTimmar * 52) / 12;
      break;
    case "Vecka":
      grundl√∂n = (kompensation * 52) / 12;
      break;
    case "Dag":
      grundl√∂n = kompensation * 21.7; // Genomsnitt arbetsdagar per m√•nad
      break;
    default:
      grundl√∂n = kompensation;
  }

  // Justera f√∂r deltid
  if (deltidProcent && deltidProcent < 100) {
    grundl√∂n = grundl√∂n * (deltidProcent / 100);
  }

  return Math.round(grundl√∂n);
}

// =====================================================================================
// üè¶ AVGIFTER OCH SKATTER
// =====================================================================================
// commit.....
/**
 * Ber√§knar sociala avgifter
 */
export function ber√§knaSocialaAvgifter(
  bruttol√∂n: number,
  sats: number = SOCIAL_AVGIFT_SATS
): number {
  return Math.round(bruttol√∂n * sats);
}

/**
 * Ber√§knar total l√∂nekostnad
 */
export function ber√§knaL√∂nekostnad(bruttol√∂n: number, socialaAvgifter: number): number {
  return bruttol√∂n + socialaAvgifter;
}

/**
 * Identifierar om en post √§r skattepliktig
 */
export function √§rSkattepliktig(ben√§mning: string): boolean {
  return SKATTEPLIKTIGA_POSTER.some((typ) => ben√§mning.toLowerCase().includes(typ.toLowerCase()));
}

/**
 * Ber√§knar skatt baserat p√• skattunderlag (fr√•n skatteber√§kning.ts)
 */
export function ber√§knaSkatt(skattunderlag: number): number {
  let skattesats: number;

  if (skattunderlag >= SKATTETABELLER.h√∂g.min) {
    skattesats = SKATTETABELLER.h√∂g.sats;
  } else if (skattunderlag >= SKATTETABELLER.medel.min) {
    skattesats = SKATTETABELLER.medel.sats;
  } else if (skattunderlag >= SKATTETABELLER.l√•g.min) {
    skattesats = SKATTETABELLER.l√•g.sats;
  } else {
    skattesats = SKATTETABELLER.grund.sats;
  }

  return Math.round(skattunderlag * skattesats);
}

/**
 * Ber√§knar skatt med skattetabell (fr√•n actions.ts)
 */
export function ber√§knaSkattMedTabell(bruttol√∂n: number, skattetabell?: number): number {
  const tabell = skattetabell || 34;
  const skattesats = SKATTESATSER[tabell] || 0.21974;
  return Math.round(bruttol√∂n * skattesats);
}

/**
 * Ber√§knar skattunderlag med alla skattepliktiga till√§gg
 */
export function ber√§knaSkattunderlag(grundl√∂n: number, extrarader: any[]): number {
  let skattunderlag = grundl√∂n;
  extrarader.forEach((rad) => {
    if (RAD_KONFIGURATIONER[rad.typ]?.skattepliktig) {
      skattunderlag += parseFloat(rad.kolumn3) || 0;
    }
  });
  return skattunderlag;
}

// =====================================================================================
// üéØ HUVUDBER√ÑKNINGAR - KOMPLETT L√ñNEBER√ÑKNING
// =====================================================================================

/**
 * Komplett l√∂neber√§kning med extrarader (fr√•n huvudber√§kningar.ts)
 * F√∂r avancerade ber√§kningar med √∂vertid och dagavdrag
 */
export function ber√§knaKomplett(
  kontrakt: L√∂neKontrakt,
  √∂vertidTimmar: number = 0,
  dagAvdrag: DagAvdrag = { f√∂r√§ldraledighet: 0, v√•rdAvSjuktBarn: 0, sjukfr√•nvaro: 0 },
  extrarader: any[] = []
) {
  const timl√∂n = ber√§knaTiml√∂n(kontrakt.m√•nadsl√∂n, kontrakt.arbetstimmarPerVecka);
  const dagl√∂n = ber√§knaDagl√∂n(kontrakt.m√•nadsl√∂n);
  const √∂vertidsers√§ttning = √∂vertidTimmar * timl√∂n * 1.5;
  const totalDagavdrag =
    (dagAvdrag.f√∂r√§ldraledighet + dagAvdrag.v√•rdAvSjuktBarn + dagAvdrag.sjukfr√•nvaro) * dagl√∂n;

  const {
    bruttol√∂nTill√§gg,
    skattepliktigaF√∂rm√•ner,
    skattefriaErs√§ttningar,
    √∂vrigaTill√§gg,
    // nettol√∂nejustering,
  } = klassificeraExtrarader(extrarader);

  // I Bokio ing√•r skattepliktiga f√∂rm√•ner direkt i bruttol√∂nen
  const bruttol√∂n =
    kontrakt.m√•nadsl√∂n +
    √∂vertidsers√§ttning +
    √∂vrigaTill√§gg +
    bruttol√∂nTill√§gg +
    skattepliktigaF√∂rm√•ner -
    totalDagavdrag;

  const skattunderlag = bruttol√∂n; // Skattepliktiga f√∂rm√•ner redan inkluderade i bruttol√∂n
  const skatt = ber√§knaSkattTabell34(skattunderlag);

  // Nettol√∂n ber√§knas p√• kontantl√∂n (grundl√∂n + till√§gg - avdrag), inte p√• f√∂rm√•ner
  const kontantl√∂n =
    kontrakt.m√•nadsl√∂n + √∂vertidsers√§ttning + √∂vrigaTill√§gg + bruttol√∂nTill√§gg - totalDagavdrag;
  const nettol√∂n = kontantl√∂n - skatt + skattefriaErs√§ttningar;
  //  + nettol√∂nejustering;

  const socialaAvgifter = ber√§knaSocialaAvgifter(skattunderlag, kontrakt.socialaAvgifterSats);
  const l√∂nekostnad = bruttol√∂n + socialaAvgifter; // Skattepliktiga f√∂rm√•ner redan inkluderade i bruttol√∂n

  return {
    timl√∂n: Math.round(timl√∂n * 100) / 100,
    dagl√∂n: Math.round(dagl√∂n),
    bruttol√∂n,
    socialaAvgifter,
    l√∂nekostnad,
    skatt,
    dagavdrag: {
      f√∂r√§ldraledighet: dagAvdrag.f√∂r√§ldraledighet * dagl√∂n,
      v√•rdAvSjuktBarn: dagAvdrag.v√•rdAvSjuktBarn * dagl√∂n,
      sjukfr√•nvaro: dagAvdrag.sjukfr√•nvaro * dagl√∂n,
      totalt: totalDagavdrag,
    },
    nettol√∂n,
    skattunderlag,
    skattefriaErs√§ttningar,
  };
}

/**
 * Huvudfunktion f√∂r l√∂nekomponenter (fr√•n huvudber√§kningar.ts)
 * F√∂r bak√•tkompatibilitet med befintliga komponenter
 */
export function ber√§knaLonekomponenter(
  grundl√∂n: number,
  √∂vertid: number,
  l√∂nespec: any,
  extrarader: any[]
) {
  const originalGrundl√∂n = grundl√∂n ?? l√∂nespec?.grundl√∂n ?? l√∂nespec?.bruttol√∂n ?? 35000;
  const original√ñvertid = √∂vertid ?? l√∂nespec?.√∂vertid ?? 0;

  // Skapa kontrakt
  const kontrakt: L√∂neKontrakt = {
    m√•nadsl√∂n: originalGrundl√∂n,
    arbetstimmarPerVecka: 40,
    skattetabell: "34",
    skattekolumn: 1,
    kommunalSkatt: 32,
    socialaAvgifterSats: 0.3142,
  };

  // Analysera extrarader
  const dagAvdrag: DagAvdrag = {
    f√∂r√§ldraledighet: 0,
    v√•rdAvSjuktBarn: 0,
    sjukfr√•nvaro: 0,
  };

  let karensavdragSumma = 0;
  const √∂vrigaExtrarader: any[] = [];

  extrarader.forEach((rad) => {
    const antal = parseFloat(rad.kolumn2) || 1;

    if (rad.kolumn1?.toLowerCase().includes("karensavdrag")) {
      // Hantera karensavdrag enligt Bokio
      karensavdragSumma += ber√§knaKarensavdrag(originalGrundl√∂n) * antal;
    } else if (rad.kolumn1?.toLowerCase().includes("f√∂r√§ldraledighet")) {
      dagAvdrag.f√∂r√§ldraledighet = antal;
    } else if (rad.kolumn1?.toLowerCase().includes("v√•rd av sjukt barn")) {
      dagAvdrag.v√•rdAvSjuktBarn = antal;
    } else if (rad.kolumn1?.toLowerCase().includes("sjuk")) {
      dagAvdrag.sjukfr√•nvaro = antal;
    } else {
      √∂vrigaExtrarader.push(rad);
    }
  });

  // Om karensavdrag finns, l√§gg till det som dagavdrag (s√• det bara dras en g√•ng)
  let justeradeDagAvdrag = { ...dagAvdrag };
  if (karensavdragSumma > 0) {
    // Vi l√§gger karensavdraget som "sjukfr√•nvaro" (eller egen property om du vill)
    justeradeDagAvdrag.sjukfr√•nvaro += karensavdragSumma / ber√§knaDagl√∂n(originalGrundl√∂n);
  }

  // Ber√§kna √∂vertidstimmar
  const √∂vertidTimmar = original√ñvertid > 0 ? original√ñvertid / (originalGrundl√∂n * 0.01) : 0;

  // Anv√§nd huvudber√§kning
  const ber√§kningar = ber√§knaKomplett(
    kontrakt,
    √∂vertidTimmar,
    justeradeDagAvdrag,
    √∂vrigaExtrarader
  );

  return {
    grundl√∂n: originalGrundl√∂n,
    √∂vertid: original√ñvertid,
    extraradsSumma: √∂vrigaExtrarader.reduce((sum, rad) => sum + (parseFloat(rad.kolumn3) || 0), 0),
    bruttol√∂n: ber√§kningar.bruttol√∂n,
    socialaAvgifter: ber√§kningar.socialaAvgifter,
    skatt: ber√§kningar.skatt,
    nettol√∂n: ber√§kningar.nettol√∂n,
    l√∂nekostnad: ber√§kningar.l√∂nekostnad,
    timl√∂n: ber√§kningar.timl√∂n,
    dagl√∂n: ber√§kningar.dagl√∂n,
    dagavdrag: ber√§kningar.dagavdrag,
    skattunderlag: ber√§kningar.skattunderlag,
  };
}

export function ber√§knaSkattTabell34(bruttol√∂n: number): number {
  const entry = SKATTETABELL_34_1_2025.find((row) => bruttol√∂n >= row.from && bruttol√∂n <= row.to);
  if (entry) {
    return entry.skatt;
  }
  console.log("Ingen rad hittad f√∂r bruttol√∂n:", bruttol√∂n);
  return 0;
}

// =====================================================================================
// üèñÔ∏è SEMESTERBER√ÑKNINGAR
// =====================================================================================

/**
 * Ber√§knar automatisk semesterintj√§ning per m√•nad
 * Bokio: 25 dagar per √•r = 2,083 dagar per m√•nad
 */
export function ber√§knaSemesterIntj√§ningPerM√•nad(tj√§nstegrad: number = 100): number {
  const dagarPerM√•nad = BOKIO_KONSTANTER.SEMESTERDAGAR_PER_√ÖR / BOKIO_KONSTANTER.M√ÖNADER_PER_√ÖR;
  return Math.round(dagarPerM√•nad * (tj√§nstegrad / 100) * 100) / 100; // Avrunda till 2 decimaler
}

/**
 * Ber√§knar total semesterl√∂n (grundl√∂n + till√§gg)
 */
export function ber√§knaTotalSemesterl√∂n(
  m√•nadsl√∂n: number,
  semesterdagar: number
): {
  semesterl√∂n: number;
  semesterers√§ttning: number;
  totalt: number;
} {
  const semesterl√∂n = ber√§knaSemesterL√∂n(m√•nadsl√∂n, semesterdagar);
  const semesterers√§ttning = ber√§knaSemesterers√§ttning(semesterl√∂n);

  return {
    semesterl√∂n,
    semesterers√§ttning,
    totalt: semesterl√∂n + semesterers√§ttning,
  };
}

/**
 * Semestertyper som ska kopplas automatiskt till semestersystemet
 */
export const SEMESTER_EXTRARAD_TYPER = [
  "semestertill√§gg",
  "semesterl√∂n",
  " ter",
  "betaldSemester", // Fr√•n extraradDefinitioner
  "semester",
  "semesterers√§ttning",
] as const;

/**
 * Identifierar om en extrarad √§r semesterrelaterad
 */
export function √§rSemesterExtrarad(typ: string, kolumn1: string): boolean {
  const typLower = (typ || "").toLowerCase();
  const kolumn1Lower = (kolumn1 || "").toLowerCase();

  return SEMESTER_EXTRARAD_TYPER.some(
    (semesterTyp) => typLower.includes(semesterTyp) || kolumn1Lower.includes(semesterTyp)
  );
}

/**
 * Extraherar antal semesterdagar fr√•n extrarad
 */
export function extraheraAntalSemesterdagar(kolumn2: string, kolumn3: string): number {
  // F√∂rs√∂k f√∂rst kolumn2 (antal)
  const antal = parseFloat(kolumn2 || "0");
  if (antal > 0) return antal;

  // Om kolumn2 √§r tom, f√∂rs√∂k hitta dagar i kolumn3 (belopp)
  const match = (kolumn3 || "").match(/(\d+(?:\.\d+)?)\s*dag/i);
  if (match) return parseFloat(match[1]);

  return 0;
}

/**
 * Ber√§knar semesterintj√§ning mellan tv√• datum
 */
export function ber√§knaSemesterIntj√§ningMellanDatum(
  startDatum: Date,
  slutDatum: Date,
  tj√§nstegrad: number = 100
): number {
  const m√•naderSkillnad =
    (slutDatum.getFullYear() - startDatum.getFullYear()) * 12 +
    (slutDatum.getMonth() - startDatum.getMonth());

  const m√•nadsl√∂nIntj√§ning = ber√§knaSemesterIntj√§ningPerM√•nad(tj√§nstegrad);
  return Math.max(0, m√•naderSkillnad * m√•nadsl√∂nIntj√§ning);
}

/**
 * Ber√§knar real-time semesterintj√§ning f√∂r nuvarande m√•nad
 * Anv√§nds f√∂r att visa aktuellt saldo utan att spara i databas
 */
export function ber√§knaAktuelM√•nadsIntj√§ning(tj√§nstegrad: number = 100): number {
  const idag = new Date();

  // Dagar sedan m√•nadsb√∂rjan (1 juli = 0 dagar, 7 juli = 6 dagar)
  const dagarIM√•naden = idag.getDate() - 1;

  // Intj√§ning per dag baserat p√• 25 dagar per √•r
  const intj√§ningPerDag = (BOKIO_KONSTANTER.SEMESTERDAGAR_PER_√ÖR / 365) * (tj√§nstegrad / 100);

  // Total intj√§ning f√∂r dagarna i denna m√•nad
  const m√•nadensIntj√§ning = dagarIM√•naden * intj√§ningPerDag;

  return Math.round(m√•nadensIntj√§ning * 100) / 100; // Avrunda till 2 decimaler
}

/**
 * Ber√§knar totalt semestersaldo med real-time f√∂r nuvarande m√•nad
 * Kombinerar sparad data fr√•n databas med aktuell m√•nads intj√§ning
 */
export function ber√§knaTotaltSemesterSaldo(
  sparadData: {
    intj√§nat: number;
    betalda: number;
    sparade: number;
    obetald: number;
    f√∂rskott: number;
    ers√§ttning: number;
    kvarvarande: number;
    tillg√§ngligt: number;
  },
  tj√§nstegrad: number = 100
) {
  // L√§gg till aktuell m√•nads intj√§ning till sparad intj√§ning
  const aktuelM√•nadsIntj√§ning = ber√§knaAktuelM√•nadsIntj√§ning(tj√§nstegrad);
  const totaltIntj√§nat = sparadData.intj√§nat + aktuelM√•nadsIntj√§ning;

  // Debug: Visa vad som kommer fr√•n databasen
  console.log("üîç Semester debug - sparadData:", {
    intj√§nat: sparadData.intj√§nat,
    betalda: sparadData.betalda,
    sparade: sparadData.sparade,
    obetald: sparadData.obetald,
    f√∂rskott: sparadData.f√∂rskott,
    ers√§ttning: sparadData.ers√§ttning,
  });

  // Sparade dagar ska visas under Betalda, inte som separat kategori
  const totaltBetalda = sparadData.betalda + sparadData.sparade;

  console.log("üîç Semester debug - ber√§kning:", {
    "sparadData.betalda": sparadData.betalda,
    "sparadData.sparade": sparadData.sparade,
    "totaltBetalda (betalda + sparade)": totaltBetalda,
    aktuelM√•nadsIntj√§ning: aktuelM√•nadsIntj√§ning,
    totaltIntj√§nat: totaltIntj√§nat,
  });

  // Ber√§kna om kvarvarande och tillg√§ngligt med uppdaterad logik
  const kvarvarande = totaltIntj√§nat - totaltBetalda;
  const tillg√§ngligt = kvarvarande; // Ingen separat sparade l√§ngre

  return {
    intj√§nat: totaltIntj√§nat,
    betalda: totaltBetalda, // Inkluderar nu sparade dagar
    sparade: 0, // Visas inte l√§ngre som separat kategori
    obetald: sparadData.obetald,
    f√∂rskott: sparadData.f√∂rskott,
    ers√§ttning: sparadData.ers√§ttning,
    kvarvarande,
    tillg√§ngligt,
    aktuelM√•nadsIntj√§ning, // Extra info f√∂r debugging
  };
}

/**
 * Ber√§knar total semesterintj√§ning sedan anst√§llningsdatum
 * Anv√§nder formeln: (dagar sedan anst√§llning / 365) * 25 * tj√§nstegrad
 */
export function ber√§knaTotalIntj√§ningSedanAnst√§llning(anst√§lld: any): number {
  const idag = new Date();
  const anst√§llningsdatum = new Date(anst√§lld.startdatum);

  // Ber√§kna dagar sedan anst√§llning
  const dagarSedanAnst√§llning = Math.floor(
    (idag.getTime() - anst√§llningsdatum.getTime()) / (1000 * 60 * 60 * 24)
  );

  // Ber√§kna intj√§nade dagar: (dagar / 365) * 25 semesterdagar per √•r
  const tj√§nstegrad = (anst√§lld.deltid_procent || 100) / 100;
  const intj√§nadeDagar = (dagarSedanAnst√§llning / 365) * 25 * tj√§nstegrad;

  return Math.max(0, parseFloat(intj√§nadeDagar.toFixed(2)));
}

/**
 * Ber√§knar aktuell m√•nads semesterintj√§ning
 * Anv√§nder formeln: (25 dagar / 12 m√•nader) * tj√§nstegrad
 */
// export function ber√§knaAktuelM√•nadsIntj√§ning(tj√§nstegrad: number = 100): number {
//  const m√•natligIntj√§ning = (25 / 12) * (tj√§nstegrad / 100);
//  return parseFloat(m√•natligIntj√§ning.toFixed(2));
// }
