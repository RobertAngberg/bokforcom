"use client";

import { useState } from "react";
import Knapp from "../../_components/Knapp";

interface BankgiroExportProps {
  anst√§llda: any[];
  utbetalningsdatum: Date | null;
  l√∂nespecar: Record<string, any>;
}

export default function BankgiroExport({
  anst√§llda,
  utbetalningsdatum,
  l√∂nespecar,
}: BankgiroExportProps) {
  const [visaModal, setVisaModal] = useState(false);
  const [kundnummer, setKundnummer] = useState("123456");
  const [bankgironummer, setBankgironummer] = useState("123-1234");

  // Ber√§kna totaler
  const anst√§lldaMedL√∂nespec = anst√§llda.filter((a) => l√∂nespecar[a.id]);
  const totalBelopp = anst√§lldaMedL√∂nespec.reduce((sum, anst√§lld) => {
    const l√∂nespec = l√∂nespecar[anst√§lld.id];
    return sum + parseFloat(l√∂nespec?.nettol√∂n || 0);
  }, 0);

  const genereraBankgirofil = () => {
    if (!utbetalningsdatum) return;

    const datum = utbetalningsdatum.toISOString().slice(2, 10).replace(/-/g, ""); // YYMMDD
    const bankgiroClean = bankgironummer.replace("-", "").padStart(10, "0");

    let fil = "";

    // Header (01-post)
    const header = `01${datum}  L√ñN${" ".repeat(46)}SEK${kundnummer.padStart(6, "0")}0001${bankgiroClean}  \n`;
    fil += header;

    // Betalningsposter (35-post) f√∂r varje anst√§lld
    anst√§lldaMedL√∂nespec.forEach((anst√§lld) => {
      const l√∂nespec = l√∂nespecar[anst√§lld.id];
      const nettol√∂n = Math.round(parseFloat(l√∂nespec?.nettol√∂n || 0) * 100); // √ñre
      const clearingPadded = (anst√§lld.clearingnummer || "0000").padStart(4, "0");
      const kontoPadded = (anst√§lld.bankkonto || "0").padStart(10, "0");
      const beloppPadded = nettol√∂n.toString().padStart(12, "0");
      const namn = `L√∂n ${anst√§lld.f√∂rnamn} ${anst√§lld.efternamn}`.substring(0, 12);

      const betalning = `35${datum}    ${clearingPadded}${kontoPadded}${beloppPadded}${" ".repeat(18)}${kontoPadded}${namn.padEnd(12, " ")}\n`;
      fil += betalning;
    });

    // Slutpost (09-post)
    const total√ñre = Math.round(totalBelopp * 100);
    const antalPoster = anst√§lldaMedL√∂nespec.length.toString().padStart(8, "0");
    const totalBeloppPadded = total√ñre.toString().padStart(12, "0");

    const slutpost = `09${datum}${" ".repeat(20)}${totalBeloppPadded}${antalPoster}${" ".repeat(40)}\n`;
    fil += slutpost;

    // Ladda ner filen
    const blob = new Blob([fil], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `loner_${datum}.txt`;
    a.click();
    URL.revokeObjectURL(url);

    setVisaModal(false);
  };

  if (anst√§lldaMedL√∂nespec.length === 0) {
    return null; // Ingen knapp om inga l√∂nespecar
  }

  return (
    <>
      <Knapp text="üí≥ H√§mta Bankgirofil" onClick={() => setVisaModal(true)} />

      {visaModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-auto">
            {/* Header */}
            <div className="bg-slate-800 text-white p-4 rounded-t-lg">
              <h2 className="text-xl font-bold">H√§mta Bankgirofil</h2>
              <p className="text-sm text-gray-300 mt-1">
                Bankgiro-filer kan anv√§ndas f√∂r att snabbt ladda upp flera betalningar till din
                bank. Men du m√•ste k√∂pa den extratj√§nsten fr√•n din bank innan det fungerar.
              </p>
            </div>

            {/* Content */}
            <div className="p-6 text-black">
              <div className="mb-6">
                <h3 className="font-semibold mb-3">V√§lj filformat</h3>
                <div className="bg-blue-50 border border-blue-200 rounded p-3">
                  <span className="font-medium text-blue-800">L√∂ner</span>
                </div>
              </div>

              {/* Inst√§llningar */}
              <div className="grid grid-cols-2 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Kundnummer f√∂r Bankgiromax <span className="text-gray-500">6 tecken</span>
                  </label>
                  <input
                    type="text"
                    maxLength={6}
                    value={kundnummer}
                    onChange={(e) => setKundnummer(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Bankgironummer <span className="text-gray-500">max 10 tecken</span>
                  </label>
                  <input
                    type="text"
                    maxLength={11}
                    value={bankgironummer}
                    onChange={(e) => setBankgironummer(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              {/* F√∂rhandsvisning */}
              <div className="mb-6">
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse border border-gray-300">
                    <thead>
                      <tr className="bg-gray-50">
                        <th className="border border-gray-300 px-3 py-2 text-left">Namn</th>
                        <th className="border border-gray-300 px-3 py-2 text-left">
                          Clearingnummer
                        </th>
                        <th className="border border-gray-300 px-3 py-2 text-left">Bankkonto</th>
                        <th className="border border-gray-300 px-3 py-2 text-right">Belopp</th>
                      </tr>
                    </thead>
                    <tbody>
                      {anst√§lldaMedL√∂nespec.map((anst√§lld) => {
                        const l√∂nespec = l√∂nespecar[anst√§lld.id];
                        const nettol√∂n = parseFloat(l√∂nespec?.nettol√∂n || 0);

                        return (
                          <tr key={anst√§lld.id}>
                            <td className="border border-gray-300 px-3 py-2">
                              {anst√§lld.f√∂rnamn} {anst√§lld.efternamn}
                            </td>
                            <td className="border border-gray-300 px-3 py-2">
                              {anst√§lld.clearingnummer}
                            </td>
                            <td className="border border-gray-300 px-3 py-2">
                              {anst√§lld.bankkonto}
                            </td>
                            <td className="border border-gray-300 px-3 py-2 text-right">
                              {nettol√∂n.toLocaleString("sv-SE", { minimumFractionDigits: 2 })} kr
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>

              {/* Sammanfattning */}
              <div className="bg-green-50 border border-green-200 rounded p-4 mb-6">
                <p className="text-green-800">
                  <strong>
                    Inkludera {anst√§lldaMedL√∂nespec.length} betalningar p√• totalt{" "}
                    {totalBelopp.toLocaleString("sv-SE", { minimumFractionDigits: 2 })} kr
                  </strong>
                </p>
              </div>

              {/* Knappar */}
              <div className="flex gap-3 justify-end">
                <Knapp text="Avbryt" onClick={() => setVisaModal(false)} />
                <Knapp text="üíæ Skapa fil" onClick={genereraBankgirofil} />
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
