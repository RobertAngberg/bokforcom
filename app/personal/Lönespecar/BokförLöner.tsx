"use client";

import { useState } from "react";
import { RAD_KONFIGURATIONER } from "./Extrarader/extraradDefinitioner";
import { bokf√∂rL√∂neUtbetalning } from "./bokf√∂rL√∂neUtbetalning";

interface Bokf√∂ringsPost {
  konto: string;
  kontoNamn: string;
  debet: number;
  kredit: number;
}

interface Bokf√∂rL√∂nerProps {
  l√∂nespec: any;
  extrarader: any[];
  ber√§knadeV√§rden: any;
  anst√§lldNamn: string;
  isOpen: boolean;
  onClose: () => void;
  onBokf√∂rt?: () => void;
}

// Mapping fr√•n extrarad-typ till bokf√∂ringskonto - SINGLE SOURCE OF TRUTH
const EXTRARAD_TILL_KONTO: Record<string, { konto: string; kontoNamn: string }> = {
  // Skattepliktiga f√∂rm√•ner
  boende: { konto: "7381", kontoNamn: "Kostnader f√∂r fri bostad" },
  gratisFrukost: { konto: "7382", kontoNamn: "Kostnader f√∂r fria eller subventionerade m√•ltider" },
  gratisLunchMiddag: {
    konto: "7382",
    kontoNamn: "Kostnader f√∂r fria eller subventionerade m√•ltider",
  },
  gratisMat: { konto: "7382", kontoNamn: "Kostnader f√∂r fria eller subventionerade m√•ltider" },
  ranteforman: { konto: "7386", kontoNamn: "Subventionerad r√§nta" },
  forsakring: { konto: "7389", kontoNamn: "√ñvriga kostnader f√∂r f√∂rm√•ner" },
  parkering: { konto: "7389", kontoNamn: "√ñvriga kostnader f√∂r f√∂rm√•ner" },
  annanForman: { konto: "7389", kontoNamn: "√ñvriga kostnader f√∂r f√∂rm√•ner" },

  // Semester
  semestertillagg: { konto: "7285", kontoNamn: "Semesterl√∂ner till tj√§nstem√§n" },
  semesterskuld: { konto: "7285", kontoNamn: "Semesterl√∂ner till tj√§nstem√§n" },

  // √ñvertid och till√§gg
  overtid: { konto: "7210", kontoNamn: "L√∂ner till tj√§nstem√§n" },
  obTillagg: { konto: "7210", kontoNamn: "L√∂ner till tj√§nstem√§n" },
  risktillagg: { konto: "7210", kontoNamn: "L√∂ner till tj√§nstem√§n" },

  // Avdrag (obetald fr√•nvaro dras av fr√•n l√∂nen)
  obetaldFranvaro: { konto: "7210", kontoNamn: "L√∂ner till tj√§nstem√§n" },

  // Skattefria ers√§ttningar
  resersattning: { konto: "7321", kontoNamn: "Skattefria traktamenten, Sverige" },
  logi: { konto: "7321", kontoNamn: "Skattefria traktamenten, Sverige" },
  uppehalleInrikes: { konto: "7321", kontoNamn: "Skattefria traktamenten, Sverige" },
  uppehalleUtrikes: { konto: "7323", kontoNamn: "Skattefria traktamenten, utlandet" },
  annanKompensation: { konto: "7321", kontoNamn: "Skattefria traktamenten, Sverige" },
  privatBil: { konto: "7331", kontoNamn: "Skattefria bilers√§ttningar" },
};

// Validering f√∂r att s√§kerst√§lla konsistens mellan definitions och mappningar
const validateExtraradMapping = () => {
  if (typeof window === "undefined") return; // Skip p√• server-side

  const definieradeTyper = Object.keys(RAD_KONFIGURATIONER);
  const bokf√∂ringsTyper = Object.keys(EXTRARAD_TILL_KONTO);

  // Kontrollera saknade mappningar f√∂r skattepliktiga/skattefria extrarader
  const skattepliktigaTyper = definieradeTyper.filter(
    (typ) => RAD_KONFIGURATIONER[typ].skattepliktig === true
  );
  const skattefriaTyper = definieradeTyper.filter(
    (typ) => RAD_KONFIGURATIONER[typ].skattepliktig === false
  );

  const saknarBokf√∂ring = [...skattepliktigaTyper, ...skattefriaTyper].filter(
    (typ) => !bokf√∂ringsTyper.includes(typ)
  );

  // Kontrollera on√∂diga mappningar (typ som inte finns i definitionen)
  const on√∂digaMappningar = bokf√∂ringsTyper.filter((typ) => !definieradeTyper.includes(typ));

  // Logga varningar i development mode
  if (process.env.NODE_ENV === "development") {
    if (saknarBokf√∂ring.length > 0) {
      console.warn("üö® Bokf√∂rL√∂ner: Saknar bokf√∂ringskonton f√∂r extraradtyper:", saknarBokf√∂ring);
      console.warn("L√§gg till dem i EXTRARAD_TILL_KONTO mappningen");
    }

    if (on√∂digaMappningar.length > 0) {
      console.warn(
        "‚ö†Ô∏è Bokf√∂rL√∂ner: On√∂diga bokf√∂ringsmappningar (typ finns ej i definitionen):",
        on√∂digaMappningar
      );
    }

    if (saknarBokf√∂ring.length === 0 && on√∂digaMappningar.length === 0) {
      console.log("‚úÖ Bokf√∂rL√∂ner: Alla extraradmappningar √§r konsistenta");
    }
  }

  return {
    saknarBokf√∂ring,
    on√∂digaMappningar,
    √§rKonsistent: saknarBokf√∂ring.length === 0 && on√∂digaMappningar.length === 0,
  };
};

export default function Bokf√∂rL√∂ner({
  l√∂nespec,
  extrarader,
  ber√§knadeV√§rden,
  anst√§lldNamn,
  isOpen,
  onClose,
  onBokf√∂rt,
}: Bokf√∂rL√∂nerProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [utbetalningsdatum, setUtbetalningsdatum] = useState(
    new Date().toISOString().split("T")[0]
  );
  const [kommentar, setKommentar] = useState("");

  // Validera mappningen vid f√∂rsta rendering (endast i development)
  if (typeof window !== "undefined" && process.env.NODE_ENV === "development") {
    validateExtraradMapping();
  }

  const handleBokf√∂r = async () => {
    if (!l√∂nespec?.id) {
      setError("Ingen l√∂nespecifikation vald");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const result = await bokf√∂rL√∂neUtbetalning({
        l√∂nespecId: l√∂nespec.id,
        extrarader,
        ber√§knadeV√§rden,
        anst√§lldNamn,
        period: `${l√∂nespec.m√•nad}/${l√∂nespec.√•r}`,
        utbetalningsdatum,
        kommentar: kommentar || undefined,
      });

      alert(`‚úÖ ${result.message}`);
      onBokf√∂rt?.();
      onClose();
    } catch (error: any) {
      setError(error.message || "Ett fel intr√§ffade vid bokf√∂ring");
      console.error("Bokf√∂ringsfel:", error);
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  // Analysera extrarader och mappa till konton
  const analyseraBokf√∂ringsposter = (): Bokf√∂ringsPost[] => {
    const poster: Bokf√∂ringsPost[] = [];

    // Anv√§nd ENDAST de redan ber√§knade v√§rdena - SINGLE SOURCE OF TRUTH
    const bruttol√∂n = ber√§knadeV√§rden.bruttol√∂n || 0;
    const totalSocialaAvgifter = ber√§knadeV√§rden.socialaAvgifter || 0;
    const totalSkatt = ber√§knadeV√§rden.skatt || 0;
    const totalNettol√∂n = ber√§knadeV√§rden.nettol√∂n || 0;

    // Analysera extrarader f√∂r specifika konton baserat p√• typ
    let reraF√∂rm√•ner = 0; // Endast f√∂rm√•ner som beh√∂ver motkonto (7385, 7381-7389 utom 7399)
    let skattefriaErs√§ttningar = 0;
    const kontoSummor: Record<string, { kontoNamn: string; belopp: number }> = {};

    extrarader.forEach((rad) => {
      const typ = rad.typ; // Detta √§r nyckeln fr√•n RAD_KONFIGURATIONER
      const belopp = parseFloat(rad.kolumn3) || 0;

      if (belopp === 0) return;

      // Anv√§nd mappning ist√§llet f√∂r string-matching
      const kontoInfo = EXTRARAD_TILL_KONTO[typ];
      if (kontoInfo) {
        // Gruppera belopp per konto (beh√•ll negativt belopp f√∂r avdrag)
        if (!kontoSummor[kontoInfo.konto]) {
          kontoSummor[kontoInfo.konto] = { kontoNamn: kontoInfo.kontoNamn, belopp: 0 };
        }
        kontoSummor[kontoInfo.konto].belopp += belopp; // Beh√•ll riktigt belopp (kan vara negativt)

        // Kategorisera f√∂r motkonton
        const radKonfig = RAD_KONFIGURATIONER[typ];
        if (radKonfig?.skattepliktig) {
          // F√∂rm√•nskonton (7381-7389) beh√∂ver motkonto, inte l√∂netill√§gg
          const kontoNummer = kontoInfo.konto;
          if (kontoNummer >= "7381" && kontoNummer <= "7389") {
            reraF√∂rm√•ner += Math.abs(belopp);
          }
        } else {
          skattefriaErs√§ttningar += Math.abs(belopp);
        }
      }
    });

    // L√§gg till extraradsposter
    Object.entries(kontoSummor).forEach(([konto, { kontoNamn, belopp }]) => {
      poster.push({
        konto,
        kontoNamn,
        debet: Math.round(belopp * 100) / 100,
        kredit: 0,
      });
    });

    // HUVUDPOSTER

    // Ber√§kna kontantl√∂n f√∂rst (anv√§nds i flera st√§llen)
    // Kontantl√∂n = bruttol√∂n MINUS alla f√∂rm√•ner
    const totalKontantl√∂n = bruttol√∂n - reraF√∂rm√•ner;

    // 1. L√∂ner till tj√§nstem√§n (7210) - ENDAST kontantl√∂n (ej f√∂rm√•ner)
    if (totalKontantl√∂n > 0) {
      // Ta bort eventuell tidigare 7210-post fr√•n extrarader f√∂r att undvika dubletter
      const befintlig7210Index = poster.findIndex((p) => p.konto === "7210");
      if (befintlig7210Index !== -1) {
        poster.splice(befintlig7210Index, 1);
      }

      poster.push({
        konto: "7210",
        kontoNamn: "L√∂ner till tj√§nstem√§n",
        debet: Math.round(totalKontantl√∂n * 100) / 100,
        kredit: 0,
      });
    }

    // 2. Motkonto skattepliktiga f√∂rm√•ner (7399) - endast f√∂r rena f√∂rm√•ner
    if (reraF√∂rm√•ner > 0) {
      poster.push({
        konto: "7399",
        kontoNamn: "Motkonto skattepliktiga f√∂rm√•ner",
        debet: 0,
        kredit: Math.round(reraF√∂rm√•ner * 100) / 100,
      });
    }

    // 3. SOCIALA AVGIFTER - Dela upp enligt Bokios modell

    // Kontantl√∂n = samma som 7210 (grundl√∂n + l√∂netill√§gg - avdrag, exklusive f√∂rm√•ner)
    const kontantl√∂n = totalKontantl√∂n;

    // 7510: Lagstadgade sociala avgifter p√• kontantl√∂n
    const socialaAvgifterKontant = Math.round(kontantl√∂n * 0.3142 * 100) / 100;
    if (socialaAvgifterKontant > 0) {
      poster.push({
        konto: "7510",
        kontoNamn: "Lagstadgade sociala avgifter",
        debet: socialaAvgifterKontant,
        kredit: 0,
      });
    }

    // Analysera f√∂rm√•ner f√∂r 7512 vs 7515
    let f√∂rm√•nerF√∂r7512 = 0; // Specifika f√∂rm√•ner som f√•r 7512
    let f√∂rm√•nerF√∂r7515 = 0; // Andra skattepliktiga f√∂rm√•ner som f√•r 7515

    // Dela upp f√∂rm√•nerna baserat p√• konto
    Object.entries(kontoSummor).forEach(([konto, { belopp }]) => {
      const radKonfig =
        RAD_KONFIGURATIONER[
          Object.keys(RAD_KONFIGURATIONER).find((typ) => {
            const mapping = EXTRARAD_TILL_KONTO[typ];
            return mapping && mapping.konto === konto;
          }) || ""
        ];

      if (radKonfig?.skattepliktig && belopp > 0) {
        const kontoNummer = konto;
        if (kontoNummer >= "7381" && kontoNummer <= "7389") {
          // Vissa f√∂rm√•ner anv√§nder 7512, andra 7515
          if (kontoNummer === "7381") {
            // Boende - anv√§nder troligtvis 7515
            f√∂rm√•nerF√∂r7515 += belopp;
          } else {
            f√∂rm√•nerF√∂r7512 += belopp;
          }
        }
      }
    });

    // 7512: Sociala avgifter f√∂r specifika f√∂rm√•nsv√§rden
    if (f√∂rm√•nerF√∂r7512 > 0) {
      const socialaAvgifterF√∂rm√•ner7512 = Math.round(f√∂rm√•nerF√∂r7512 * 0.3142 * 100) / 100;
      poster.push({
        konto: "7512",
        kontoNamn: "Sociala avgifter f√∂r f√∂rm√•nsv√§rden",
        debet: socialaAvgifterF√∂rm√•ner7512,
        kredit: 0,
      });
    }

    // 7515: Sociala avgifter p√• skattepliktiga kostnadsers√§ttningar
    if (f√∂rm√•nerF√∂r7515 > 0) {
      const socialaAvgifterF√∂rm√•ner7515 = Math.round(f√∂rm√•nerF√∂r7515 * 0.3142 * 100) / 100;
      poster.push({
        konto: "7515",
        kontoNamn: "Sociala avgifter p√• skattepliktiga kostnadsers√§ttningar",
        debet: socialaAvgifterF√∂rm√•ner7515,
        kredit: 0,
      });
    }

    // SKULDER

    // 5. Personalskatt (2710)
    if (totalSkatt > 0) {
      poster.push({
        konto: "2710",
        kontoNamn: "Personalskatt",
        debet: 0,
        kredit: Math.round(totalSkatt * 100) / 100,
      });
    }

    // 6. Avr√§kning lagstadgade sociala avgifter (2731) - summa av alla sociala avgifter
    const totalAllaSocialaAvgifter =
      socialaAvgifterKontant +
      (f√∂rm√•nerF√∂r7512 > 0 ? Math.round(f√∂rm√•nerF√∂r7512 * 0.3142 * 100) / 100 : 0) +
      (f√∂rm√•nerF√∂r7515 > 0 ? Math.round(f√∂rm√•nerF√∂r7515 * 0.3142 * 100) / 100 : 0);

    if (totalAllaSocialaAvgifter > 0) {
      poster.push({
        konto: "2731",
        kontoNamn: "Avr√§kning lagstadgade sociala avgifter",
        debet: 0,
        kredit: Math.round(totalAllaSocialaAvgifter * 100) / 100,
      });
    }

    // 7. F√∂retagskonto (1930) - ENDAST nettol√∂n (ej skattefria ers√§ttningar)
    if (totalNettol√∂n > 0) {
      poster.push({
        konto: "1930",
        kontoNamn: "F√∂retagskonto / aff√§rskonto",
        debet: 0,
        kredit: Math.round(totalNettol√∂n * 100) / 100,
      });
    }

    return poster.filter((p) => p.debet > 0 || p.kredit > 0);
  };

  const poster = analyseraBokf√∂ringsposter();
  const totalDebet = poster.reduce((sum, p) => sum + Number(p.debet), 0);
  const totalKredit = poster.reduce((sum, p) => sum + Number(p.kredit), 0);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-slate-800 p-6 rounded-lg max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-white">üìã Bokf√∂ringsposter f√∂r L√∂nespec</h2>
          <button onClick={onClose} className="text-slate-400 hover:text-white text-2xl">
            ‚úï
          </button>
        </div>

        <div className="bg-slate-700 p-4 rounded-lg mb-4">
          <h3 className="text-md font-semibold text-slate-300 mb-2">L√∂nespec-info</h3>
          <div className="text-sm text-slate-400">
            <p>Grundl√∂n: {(ber√§knadeV√§rden.grundl√∂n || 0).toLocaleString("sv-SE")} kr</p>
            <p>Bruttol√∂n: {(ber√§knadeV√§rden.bruttol√∂n || 0).toLocaleString("sv-SE")} kr</p>
            <p>
              Sociala avgifter: {(ber√§knadeV√§rden.socialaAvgifter || 0).toLocaleString("sv-SE")} kr
            </p>
            <p>Skatt: {(ber√§knadeV√§rden.skatt || 0).toLocaleString("sv-SE")} kr</p>
            <p>Nettol√∂n: {(ber√§knadeV√§rden.nettol√∂n || 0).toLocaleString("sv-SE")} kr</p>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-sm text-white">
            <thead>
              <tr className="border-b border-slate-600">
                <th className="text-left p-2">Konto</th>
                <th className="text-left p-2">Beskrivning</th>
                <th className="text-right p-2">Debet</th>
                <th className="text-right p-2">Kredit</th>
              </tr>
            </thead>
            <tbody>
              {poster
                .sort((a, b) => a.konto.localeCompare(b.konto))
                .map((post, i) => (
                  <tr key={i} className="border-b border-slate-700 hover:bg-slate-700">
                    <td className="p-2 font-mono">{post.konto}</td>
                    <td className="p-2">{post.kontoNamn}</td>
                    <td className="p-2 text-right">
                      {post.debet > 0 ? `${post.debet.toLocaleString("sv-SE")} kr` : ""}
                    </td>
                    <td className="p-2 text-right">
                      {post.kredit > 0 ? `${post.kredit.toLocaleString("sv-SE")} kr` : ""}
                    </td>
                  </tr>
                ))}
            </tbody>
            <tfoot>
              <tr className="border-t-2 border-slate-500 font-bold">
                <td className="p-2" colSpan={2}>
                  TOTALT
                </td>
                <td className="p-2 text-right">{totalDebet.toLocaleString("sv-SE")} kr</td>
                <td className="p-2 text-right">{totalKredit.toLocaleString("sv-SE")} kr</td>
              </tr>
              <tr
                className={`${Math.abs(totalDebet - totalKredit) < 0.01 ? "text-green-400" : "text-red-400"}`}
              >
                <td className="p-2" colSpan={2}>
                  BALANS
                </td>
                <td className="p-2 text-right" colSpan={2}>
                  {Math.abs(totalDebet - totalKredit) < 0.01
                    ? "‚úÖ Balanserad"
                    : `‚ùå Diff: ${(totalDebet - totalKredit).toFixed(2)} kr`}
                </td>
              </tr>
            </tfoot>
          </table>
        </div>

        {/* Bokf√∂ringsinst√§llningar */}
        <div className="bg-slate-700 p-4 rounded-lg mt-4">
          <h3 className="text-md font-semibold text-slate-300 mb-4">Bokf√∂ringsinst√§llningar</h3>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-300 mb-1">
                Utbetalningsdatum
              </label>
              <input
                type="date"
                value={utbetalningsdatum}
                onChange={(e) => setUtbetalningsdatum(e.target.value)}
                className="w-full p-2 bg-slate-600 text-white rounded border border-slate-500 focus:border-blue-500 focus:outline-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-slate-300 mb-1">
                Kommentar (valfritt)
              </label>
              <input
                type="text"
                value={kommentar}
                onChange={(e) => setKommentar(e.target.value)}
                placeholder={`L√∂neutbetalning ${anst√§lldNamn}`}
                className="w-full p-2 bg-slate-600 text-white rounded border border-slate-500 focus:border-blue-500 focus:outline-none"
              />
            </div>
          </div>
        </div>

        {/* Felmeddelande */}
        {error && (
          <div className="bg-red-900 border border-red-600 text-red-200 p-3 rounded-lg mt-4">
            <p className="font-semibold">‚ùå Fel vid bokf√∂ring:</p>
            <p>{error}</p>
          </div>
        )}

        {/* Knapprad */}
        <div className="flex justify-between items-center mt-6">
          <button
            onClick={onClose}
            className="bg-slate-600 hover:bg-slate-500 text-white px-4 py-2 rounded"
            disabled={loading}
          >
            Avbryt
          </button>

          <div className="flex items-center space-x-3">
            {/* Balansvarning */}
            {Math.abs(totalDebet - totalKredit) >= 0.01 && (
              <div className="text-red-400 text-sm">‚ö†Ô∏è Bokf√∂ringen √§r inte balanserad</div>
            )}

            <button
              onClick={handleBokf√∂r}
              disabled={loading || Math.abs(totalDebet - totalKredit) >= 0.01}
              className={`px-6 py-2 rounded font-semibold ${
                loading || Math.abs(totalDebet - totalKredit) >= 0.01
                  ? "bg-gray-500 cursor-not-allowed"
                  : "bg-green-600 hover:bg-green-500"
              } text-white`}
            >
              {loading ? "Bokf√∂r..." : "üìã Bokf√∂r L√∂neutbetalning"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
