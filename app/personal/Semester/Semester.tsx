"use client";

import { useState, useEffect } from "react";
import InfoTooltip from "../../_components/InfoTooltip";
import Knapp from "../../_components/Knapp";
import Tabell from "../../_components/Tabell";
import Toast from "../../_components/Toast";
import { ColumnDefinition } from "../../_components/TabellRad";
import {
  h√§mtaSemesterTransaktioner,
  sparaSemesterTransaktion,
  uppdateraSemesterdata,
} from "../actions";
import BokforModal from "./BokforModal";

type SemesterBoxField = "betalda_dagar" | "sparade_dagar" | "skuld" | "komp_dagar";

type SemesterBoxSummary = {
  betalda_dagar: number;
  sparade_dagar: number;
  skuld: number;
  komp_dagar: number;
};

interface ModernSemesterProps {
  anst√§lld: {
    id: number;
    f√∂rnamn: string;
    efternamn: string;
    kompensation: number;
    anst√§llningsdatum: string;
    tj√§nstegrad?: number;
  };
  userId: number;
}

export default function ModernSemester({ anst√§lld, userId }: ModernSemesterProps) {
  // State f√∂r att styra om knappen ska visas
  const [showBokforKnapp, setShowBokforKnapp] = useState(false);
  const [summary, setSummary] = useState<SemesterBoxSummary>({
    betalda_dagar: 0,
    sparade_dagar: 0,
    skuld: 0,
    komp_dagar: 0,
  });
  const [prevSummary, setPrevSummary] = useState<SemesterBoxSummary | null>(null);
  const [editingField, setEditingField] = useState<SemesterBoxField | null>(null);
  const [editValue, setEditValue] = useState<string>("");
  // Remove originalSummary, not needed
  const [loading, setLoading] = useState(false);
  const [bokforModalOpen, setBokforModalOpen] = useState(false);
  const [bokforRows, setBokforRows] = useState<any[]>([]);
  const [toast, setToast] = useState<{
    type: "success" | "error" | "info";
    message: string;
  } | null>(null);

  // H√§mta data vid laddning
  useEffect(() => {
    h√§mtaData();
  }, [anst√§lld.id]);

  // Hantera ESC-tangent f√∂r att avbryta redigering
  useEffect(() => {
    const handleEscKey = (e: KeyboardEvent) => {
      if (e.key === "Escape" && editingField) {
        setEditingField(null);
        setEditValue("");
      }
    };
    document.addEventListener("keydown", handleEscKey);
    return () => document.removeEventListener("keydown", handleEscKey);
  }, [editingField]);

  const h√§mtaData = async () => {
    setLoading(true);
    try {
      const transaktioner = await h√§mtaSemesterTransaktioner(anst√§lld.id);
      // F√∂rv√§ntar oss EN rad per anst√§lld
      const t = transaktioner[0] || {};
      const newSummary = {
        betalda_dagar: Number(t.betalda_dagar) || 0,
        sparade_dagar: Number(t.sparade_dagar) || 0,
        skuld: Number(t.skuld) || 0,
        komp_dagar: Number(t.komp_dagar) || 0,
      };
      setPrevSummary(summary); // Spara tidigare v√§rde
      setSummary(newSummary);
      setShowBokforKnapp(t.bokf√∂rd === false);
    } catch (error) {
      console.error("Fel vid h√§mtning av semesterdata:", error);
      setToast({ type: "error", message: "Kunde inte h√§mta semesterdata" });
    } finally {
      setLoading(false);
    }
  };

  // Hantera manuell redigering av semesterbox
  const handleEditField = (fieldName: SemesterBoxField, currentValue: number) => {
    setEditingField(fieldName);
    setEditValue(currentValue.toString());
  };

  const handleSaveEdit = async () => {
    if (!editingField || !editValue || !summary) return;
    const newValue = parseFloat(editValue);
    if (isNaN(newValue)) {
      setToast({ type: "error", message: "Ogiltigt nummer" });
      return;
    }
    setLoading(true);
    try {
      // Skicka kolumnnamn och nytt v√§rde direkt
      if (newValue !== summary[editingField]) {
        await sparaSemesterTransaktion({
          anst√§lldId: anst√§lld.id,
          kolumn: editingField, // "betalda_dagar", "sparade_dagar", "skuld", "komp_dagar"
          nyttV√§rde: newValue,
        });
      }
      setEditingField(null);
      setEditValue("");
      await h√§mtaData(); // H√§mta om data fr√•n servern
    } catch (error) {
      console.error("Fel vid sparande:", error);
      setToast({ type: "error", message: "Kunde inte spara √§ndringen" });
    } finally {
      setLoading(false);
    }
  };

  const handleCancelEdit = () => {
    setEditingField(null);
    setEditValue("");
  };

  // Funktion f√∂r att r√§kna ut och visa bokf√∂ringsrader enligt Bokio
  const handleOpenBokforModal = () => {
    // R√§kna ut delta (f√∂r√§ndring) i dagar
    const prevDagar = prevSummary ? prevSummary.betalda_dagar + prevSummary.sparade_dagar : 0;
    const currDagar = summary.betalda_dagar + summary.sparade_dagar;
    const deltaDagar = currDagar - prevDagar;
    // Om ingen f√∂r√§ndring, visa tomt
    if (deltaDagar === 0) {
      setBokforRows([
        { konto: "2920", namn: "Upplupna semesterl√∂ner", debet: 0, kredit: 0 },
        {
          konto: "2940",
          namn: "Upplupna lagstadgade sociala och andra avgifter",
          debet: 0,
          kredit: 0,
        },
        { konto: "7290", namn: "F√∂r√§ndring av semesterl√∂neskuld", debet: 0, kredit: 0 },
        {
          konto: "7519",
          namn: "Sociala avgifter f√∂r semester- och l√∂neskulder",
          debet: 0,
          kredit: 0,
        },
      ]);
      setBokforModalOpen(true);
      return;
    }
    // Ber√§kna belopp baserat p√• delta
    const dagsl√∂n = anst√§lld.kompensation / 21;
    const semesterl√∂nPerDag = dagsl√∂n * 1.0545;
    const semesterl√∂n = deltaDagar * semesterl√∂nPerDag;
    const socialaAvgifter = semesterl√∂n * 0.314;
    // Om delta √§r negativt, v√§nd tecken p√• debet/kredit
    const rows = [
      {
        konto: "2920",
        namn: "Upplupna semesterl√∂ner",
        debet: semesterl√∂n > 0 ? Math.round(semesterl√∂n) : 0,
        kredit: semesterl√∂n < 0 ? Math.abs(Math.round(semesterl√∂n)) : 0,
      },
      {
        konto: "2940",
        namn: "Upplupna lagstadgade sociala och andra avgifter",
        debet: socialaAvgifter > 0 ? Math.round(socialaAvgifter) : 0,
        kredit: socialaAvgifter < 0 ? Math.abs(Math.round(socialaAvgifter)) : 0,
      },
      {
        konto: "7290",
        namn: "F√∂r√§ndring av semesterl√∂neskuld",
        debet: semesterl√∂n < 0 ? Math.abs(Math.round(semesterl√∂n)) : 0,
        kredit: semesterl√∂n > 0 ? Math.round(semesterl√∂n) : 0,
      },
      {
        konto: "7519",
        namn: "Sociala avgifter f√∂r semester- och l√∂neskulder",
        debet: socialaAvgifter < 0 ? Math.abs(Math.round(socialaAvgifter)) : 0,
        kredit: socialaAvgifter > 0 ? Math.round(socialaAvgifter) : 0,
      },
    ];
    setBokforRows(rows);
    setBokforModalOpen(true);
  };

  const handleConfirmBokfor = async (kommentar: string) => {
    setLoading(true);
    try {
      // Mappa om bokforRows till r√§tt format f√∂r bokf√∂rSemester
      const rader = bokforRows.map((row) => ({
        kontobeskrivning: `${row.konto} ${row.namn}`,
        belopp: row.debet !== 0 ? row.debet : -row.kredit, // Debet positivt, Kredit negativt
      }));
      const res = await (
        await import("../actions")
      ).bokf√∂rSemester({
        userId,
        rader,
        kommentar,
        datum: new Date().toISOString(),
      });
      setBokforModalOpen(false);
      if (res?.success) {
        setToast({ type: "success", message: "Bokf√∂ring sparad!" });
        await h√§mtaData();
      } else {
        setToast({ type: "error", message: `Fel vid bokf√∂ring: ${res?.error || "Ok√§nt fel"}` });
      }
    } catch (error) {
      setToast({
        type: "error",
        message: `Fel vid bokf√∂ring: ${error instanceof Error ? error.message : error}`,
      });
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="text-white">Laddar semesterdata...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="bg-slate-800 p-6 rounded-lg">
        <h3 className="text-xl font-semibold text-white mb-2">
          Semestersaldo - {anst√§lld.f√∂rnamn} {anst√§lld.efternamn}
        </h3>
        <p className="text-blue-300 mb-6">
          üí° <strong>Klicka p√• boxarna</strong> f√∂r att manuellt justera v√§rden
        </p>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {/* Betalda dagar */}
          <div
            className="bg-red-900 p-4 rounded cursor-pointer hover:bg-red-800 transition-colors relative"
            onClick={() => handleEditField("betalda_dagar", summary.betalda_dagar)}
          >
            <div className="absolute top-2 right-2 z-10">
              <InfoTooltip text="Tillg√§ngliga betalda semesterdagar" />
            </div>
            <div className="text-sm text-red-300">Betalda</div>
            {editingField === "betalda_dagar" ? (
              <div className="flex flex-col items-center space-y-2">
                <input
                  type="text"
                  inputMode="decimal"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      handleSaveEdit();
                    }
                    if (e.key === "Escape") {
                      e.preventDefault();
                      handleCancelEdit();
                    }
                  }}
                  className="w-full text-center text-2xl font-bold text-white bg-red-700 rounded px-2 py-2 mt-2 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  autoFocus
                />
                <div className="flex space-x-2">
                  <Knapp
                    text="üíæ Spara"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleSaveEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                  <Knapp
                    text="‚ùå Avbryt"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleCancelEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                </div>
              </div>
            ) : (
              <>
                <div className="text-2xl font-bold text-white">
                  {summary.betalda_dagar.toFixed(1)}
                </div>
                <div className="text-xs text-red-400">dagar</div>
              </>
            )}
          </div>
          {/* Sparade dagar */}
          <div
            className="bg-purple-900 p-4 rounded cursor-pointer hover:bg-purple-800 transition-colors relative"
            onClick={() => handleEditField("sparade_dagar", summary.sparade_dagar)}
          >
            <div className="absolute top-2 right-2 z-10">
              <InfoTooltip text="Sparade och oanv√§nda betalda semesterdagar fr√•n f√∂reg√•ende √•r" />
            </div>
            <div className="text-sm text-purple-300">Sparade</div>
            {editingField === "sparade_dagar" ? (
              <div className="flex flex-col items-center space-y-2">
                <input
                  type="text"
                  inputMode="decimal"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      handleSaveEdit();
                    }
                    if (e.key === "Escape") {
                      e.preventDefault();
                      handleCancelEdit();
                    }
                  }}
                  className="w-full text-center text-2xl font-bold text-white bg-purple-700 rounded px-2 py-2 mt-2 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  autoFocus
                />
                <div className="flex space-x-2">
                  <Knapp
                    text="üíæ Spara"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleSaveEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                  <Knapp
                    text="‚ùå Avbryt"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleCancelEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                </div>
              </div>
            ) : (
              <>
                <div className="text-2xl font-bold text-white">
                  {summary.sparade_dagar.toFixed(1)}
                </div>
                <div className="text-xs text-purple-400">dagar</div>
              </>
            )}
          </div>
          {/* Skuld */}
          <div
            className="bg-yellow-900 p-4 rounded cursor-pointer hover:bg-yellow-800 transition-colors relative"
            onClick={() => handleEditField("skuld", summary.skuld)}
          >
            <div className="absolute top-2 right-2 z-10">
              <InfoTooltip text="Betalda semesterdagar som givits i f√∂rskott" />
            </div>
            <div className="text-sm text-yellow-300">Skuld</div>
            {editingField === "skuld" ? (
              <div className="flex flex-col items-center space-y-2">
                <input
                  type="text"
                  inputMode="decimal"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      handleSaveEdit();
                    }
                    if (e.key === "Escape") {
                      e.preventDefault();
                      handleCancelEdit();
                    }
                  }}
                  className="w-full text-center text-2xl font-bold text-white bg-yellow-700 rounded px-2 py-2 mt-2 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  autoFocus
                />
                <div className="flex space-x-2">
                  <Knapp
                    text="üíæ Spara"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleSaveEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                  <Knapp
                    text="‚ùå Avbryt"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleCancelEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                </div>
              </div>
            ) : (
              <>
                <div className="text-2xl font-bold text-white">{summary.skuld.toFixed(1)}</div>
                <div className="text-xs text-yellow-400">dagar</div>
              </>
            )}
          </div>
          {/* Komp */}
          <div
            className="bg-emerald-900 p-4 rounded cursor-pointer hover:bg-emerald-800 transition-colors relative"
            onClick={() => handleEditField("komp_dagar", summary.komp_dagar)}
          >
            <div className="absolute top-2 right-2 z-10">
              <InfoTooltip text="Kompensation i kronor f√∂r outnyttjad semester/tid" />
            </div>
            <div className="text-sm text-emerald-300">Komp</div>
            {editingField === "komp_dagar" ? (
              <div className="flex flex-col items-center space-y-2">
                <input
                  type="text"
                  inputMode="decimal"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      handleSaveEdit();
                    }
                    if (e.key === "Escape") {
                      e.preventDefault();
                      handleCancelEdit();
                    }
                  }}
                  className="w-full text-center text-2xl font-bold text-white bg-emerald-700 rounded px-2 py-2 mt-2 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  autoFocus
                />
                <div className="flex space-x-2">
                  <Knapp
                    text="üíæ Spara"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleSaveEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                  <Knapp
                    text="‚ùå Avbryt"
                    onClick={(e) => {
                      e?.stopPropagation();
                      handleCancelEdit();
                    }}
                    className="text-sm px-2 py-0.5 min-w-0"
                  />
                </div>
              </div>
            ) : (
              <>
                <div className="text-2xl font-bold text-white">{summary.komp_dagar.toFixed(2)}</div>
                <div className="text-xs text-emerald-400">kr</div>
              </>
            )}
          </div>
        </div>
        <div className="mt-6 p-4 bg-slate-700 rounded">
          <h4 className="font-semibold text-white mb-2">Information</h4>
          <div className="text-sm text-slate-300 space-y-1">
            <p>
              ‚Ä¢ <strong>M√•nadsl√∂n:</strong> {anst√§lld.kompensation.toLocaleString("sv-SE")} kr
            </p>
            <p>
              ‚Ä¢ <strong>Anst√§lld sedan:</strong>{" "}
              {new Date(anst√§lld.anst√§llningsdatum).toLocaleDateString("sv-SE")}
            </p>
            <p>
              ‚Ä¢ <strong>Tj√§nstegrad:</strong> {anst√§lld.tj√§nstegrad || 100}%
            </p>
            <p>
              ‚Ä¢ <strong>Intj√§ning per m√•nad:</strong> ~2,08 dagar (baserat p√• 25 dagar/√•r)
            </p>
          </div>
        </div>
        {showBokforKnapp && (
          <div className="mt-6 flex justify-end">
            <Knapp text="Bokf√∂r transaktioner" onClick={handleOpenBokforModal} />
          </div>
        )}
        <BokforModal
          open={bokforModalOpen}
          onClose={() => setBokforModalOpen(false)}
          rows={bokforRows}
          onConfirm={handleConfirmBokfor}
        />
      </div>
      {toast && (
        <Toast
          type={toast.type}
          message={toast.message}
          isVisible={true}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  );
}
