"use client";

import { useState, useEffect } from "react";
import MainLayout from "../../_components/MainLayout";
import Tabell, { ColumnDefinition } from "../../_components/Tabell";
import Knapp from "../../_components/Knapp";
import { h√§mtaAllaAnst√§llda, h√§mtaUtl√§gg, taBortUtl√§gg } from "../actions";
import { fetchFavoritforval } from "../../bokfor/actions";
import BokforPage from "../../bokfor/page";

interface Utl√§gg {
  id: number;
  belopp: number;
  beskrivning: string;
  datum: string;
  kategori?: string;
  status: string;
  anst√§lld_namn?: string;
  kvitto_fil?: string;
}

export default function UtlaggPage() {
  const [utl√§gg, setUtl√§gg] = useState<Utl√§gg[]>([]);
  const [loading, setLoading] = useState(true);
  const [showNyttUtl√§gg, setShowNyttUtl√§gg] = useState(false);
  const [favoritF√∂rvalen, setFavoritF√∂rvalen] = useState<any[] | null>(null);

  useEffect(() => {
    h√§mtaAllaUtl√§gg();
  }, []);

  const h√§mtaAllaUtl√§gg = async () => {
    try {
      setLoading(true);

      // H√§mta alla anst√§llda f√∂rst
      const anst√§llda = await h√§mtaAllaAnst√§llda();
      console.log("üßë‚Äçüíº Alla anst√§llda:", anst√§llda);

      // Samla alla utl√§gg fr√•n alla anst√§llda
      const allaUtl√§gg: Utl√§gg[] = [];

      for (const anst√§lld of anst√§llda) {
        try {
          const anst√§lldUtl√§gg = await h√§mtaUtl√§gg(anst√§lld.id);
          console.log(`Utl√§gg f√∂r ${anst√§lld.f√∂rnamn}:`, anst√§lldUtl√§gg);

          if (anst√§lldUtl√§gg.length > 0) {
            console.log("üîç F√∂rsta utl√§gg structure:", anst√§lldUtl√§gg[0]);
          }

          const mappedUtl√§gg = anst√§lldUtl√§gg
            .filter((u: any) => u && typeof u === "object" && u.id) // Filtrera bort tomma objekt och se till att id finns
            .map((u: any) => {
              const mapped = {
                id: u.id,
                belopp: u.belopp || 0,
                beskrivning: u.beskrivning || "Utl√§gg",
                datum: u.datum || new Date().toISOString().split("T")[0],
                kategori: u.kategori || "",
                status: u.status || "V√§ntande",
                kvitto_fil: u.kvitto_fil || null,
                anst√§lld_namn: `${anst√§lld.f√∂rnamn} ${anst√§lld.efternamn}`,
              };
              console.log("üóÇÔ∏è Mapped utl√§gg:", mapped);
              return mapped;
            });

          console.log(`üìã Alla mappade utl√§gg f√∂r ${anst√§lld.f√∂rnamn}:`, mappedUtl√§gg);
          allaUtl√§gg.push(...mappedUtl√§gg);
        } catch (error) {
          console.error(`Fel vid h√§mtning av utl√§gg f√∂r ${anst√§lld.f√∂rnamn}:`, error);
        }
      }

      setUtl√§gg(allaUtl√§gg);
      console.log("üéØ Final allaUtl√§gg:", allaUtl√§gg);
    } catch (error) {
      console.error("Fel vid h√§mtning av utl√§gg:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleNyttUtl√§gg = async () => {
    if (!favoritF√∂rvalen) {
      const res = await fetchFavoritforval();
      setFavoritF√∂rvalen(res);
    }
    setShowNyttUtl√§gg(true);
  };

  const handleTaBortUtl√§gg = async (utl√§ggId: number) => {
    if (!confirm("√Ñr du s√§ker p√• att du vill ta bort detta utl√§gg?")) {
      return;
    }

    try {
      setLoading(true);
      await taBortUtl√§gg(utl√§ggId);

      // Uppdatera listan
      await h√§mtaAllaUtl√§gg();
      alert("Utl√§gg borttaget!");
    } catch (error) {
      console.error("Fel vid borttagning av utl√§gg:", error);
      alert("‚ùå Kunde inte ta bort utl√§gg");
    } finally {
      setLoading(false);
    }
  };

  const columns: ColumnDefinition<Utl√§gg>[] = [
    {
      key: "datum",
      label: "Datum",
      render: (value, row) => {
        console.log("üìÖ Datum render - value:", value, "row:", row);
        return row?.datum ? new Date(row.datum).toLocaleDateString("sv-SE") : "-";
      },
    },
    {
      key: "beskrivning",
      label: "Beskrivning",
      render: (value, row) => {
        console.log("üìù Beskrivning render - value:", value, "row:", row);
        return row?.beskrivning || "-";
      },
    },
    {
      key: "anst√§lld_namn",
      label: "Anst√§lld",
      render: (value, row) => {
        console.log("üë§ Anst√§lld render - value:", value, "row:", row);
        return row?.anst√§lld_namn || "-";
      },
    },
    {
      key: "belopp",
      label: "Belopp",
      render: (value, row) => {
        console.log("üí∞ Belopp render - value:", value, "row:", row);
        return row && row.belopp !== undefined && row.belopp !== null
          ? `${row.belopp.toLocaleString("sv-SE")} kr`
          : "-";
      },
    },
    {
      key: "status",
      label: "Status",
      className: "text-center",
      render: (value, row) => {
        console.log("üö¶ Status render - value:", value, "row:", row);
        return (
          <div className="flex justify-center">
            <span
              className={`px-2 py-1 rounded text-xs ${
                row?.status === "Inkluderat i l√∂nespec"
                  ? "bg-green-900 text-green-300"
                  : row?.status === "V√§ntande"
                    ? "bg-yellow-900 text-yellow-300"
                    : "bg-gray-700 text-gray-300"
              }`}
            >
              {row?.status === "Inkluderat i l√∂nespec" ? "Inkluderat" : row?.status || "Ok√§nd"}
            </span>
          </div>
        );
      },
    },
    {
      key: "actions",
      label: "√Ötg√§rder",
      render: (value, row) => (
        <button
          onClick={(e) => {
            e.stopPropagation();
            handleTaBortUtl√§gg(row.id);
          }}
          className="text-red-400 hover:text-red-300 text-sm px-2 py-1 rounded hover:bg-red-900/20"
          disabled={loading}
        >
          üóëÔ∏è
        </button>
      ),
    },
  ];

  if (showNyttUtl√§gg && favoritF√∂rvalen) {
    return <BokforPage searchParams={Promise.resolve({})} />;
  }

  return (
    <MainLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold text-white">üßæ Utl√§gg</h1>
          <Knapp text="+ Nytt utl√§gg" onClick={handleNyttUtl√§gg} />
        </div>

        <div className="bg-slate-700 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-white mb-4">Alla utl√§gg</h2>

          {loading ? (
            <div className="text-center text-gray-400 py-8">Laddar utl√§gg...</div>
          ) : utl√§gg.length === 0 ? (
            <div className="text-center text-gray-400 py-8">
              <p>Inga utl√§gg hittades.</p>
              <p className="text-sm mt-2">
                Klicka p√• "Nytt utl√§gg" f√∂r att skapa ditt f√∂rsta utl√§gg.
              </p>
            </div>
          ) : (
            <Tabell
              data={utl√§gg}
              columns={columns}
              getRowId={(row) => {
                console.log("üÜî getRowId called with:", row);
                return row.id;
              }}
            />
          )}
        </div>

        <div className="bg-slate-700 p-4 rounded-lg">
          <h3 className="text-lg font-semibold text-white mb-2">‚ÑπÔ∏è Om utl√§gg</h3>
          <div className="text-gray-300 text-sm space-y-1">
            <p>
              ‚Ä¢ <strong>V√§ntande:</strong> Utl√§gget √§r registrerat men inte inkluderat i n√•gon
              l√∂nespec √§nnu
            </p>
            <p>
              ‚Ä¢ <strong>Inkluderat:</strong> Utl√§gget √§r kopplat till en l√∂nespecifikation
            </p>
            <p>‚Ä¢ Klicka p√• "Nytt utl√§gg" f√∂r att registrera ett nytt utl√§gg via bokf√∂ring</p>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
