"use server";

import { Pool } from "pg";
import { getUserId } from "../_utils/authUtils";
import { revalidatePath } from "next/cache";
import { validateSessionAttempt } from "../_utils/rateLimit";

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// S√ÑKERHETSVALIDERING: Logga s√§kerhetsh√§ndelser f√∂r HR-data
function logPersonalDataEvent(
  eventType: "encrypt" | "decrypt" | "validate" | "access" | "modify" | "delete" | "violation",
  userId?: number,
  details?: string
) {
  const timestamp = new Date().toISOString();
  console.log(`üîí PERSONAL DATA EVENT [${timestamp}]: ${eventType.toUpperCase()} {`);
  if (userId) console.log(`  userId: ${userId},`);
  if (details) console.log(`  details: '${details}',`);
  console.log(`  timestamp: '${timestamp}'`);
  console.log(`}`);
}

// Types
interface ExtraradData {
  l√∂nespecifikation_id: number;
  typ: string;
  kolumn1?: string | null;
  kolumn2?: string | null;
  kolumn3?: string | null;
  kolumn4?: string | null;
}

interface ExtraradResult {
  success: boolean;
  data?: any;
  error?: string;
}

interface Utl√§ggData {
  id: number;
  beskrivning: string;
  belopp: number;
  kommentar?: string;
  datum: string;
}

// Dedicated funktion f√∂r att l√§gga till utl√§gg som extrarad
export async function l√§ggTillUtl√§ggSomExtrarad(
  l√∂nespecId: number,
  utl√§gg: Utl√§ggData
): Promise<ExtraradResult> {
  const extraradData: ExtraradData = {
    l√∂nespecifikation_id: l√∂nespecId,
    typ: "manuellPost", // Beh√•ller samma typ som fungerar
    kolumn1: utl√§gg.beskrivning || `Utl√§gg - ${utl√§gg.datum}`,
    kolumn2: "1", // Antal = 1
    kolumn3: utl√§gg.belopp.toString(), // Belopp per enhet
    kolumn4: utl√§gg.kommentar || "",
  };

  return sparaExtrarad(extraradData);
}

type Anst√§lldData = {
  f√∂rnamn: string;
  efternamn: string;
  personnummer: string;
  jobbtitel: string;
  mail: string;
  clearingnummer: string;
  bankkonto: string;
  adress: string;
  postnummer: string;
  ort: string;
  startdatum: string;
  slutdatum: string;
  anst√§llningstyp: string;
  l√∂neperiod: string;
  ers√§ttningPer: string;
  kompensation: string;
  arbetsvecka: string;
  arbetsbelastning: string;
  deltidProcent: string;
  tj√§nstest√§lleAdress: string;
  tj√§nstest√§lleOrt: string;
  skattetabell: string;
  skattekolumn: string;
};
//#endregion

export async function h√§mtaAllaAnst√§llda() {
  const userId = await getUserId();

  try {
    const client = await pool.connect();

    const query = `
      SELECT * FROM anst√§llda 
      WHERE user_id = $1 
      ORDER BY skapad DESC
    `;

    const result = await client.query(query, [userId]);

    client.release();
    return result.rows;
  } catch (error) {
    console.error("‚ùå h√§mtaAllaAnst√§llda error:", error);
    return [];
  }
}

export async function h√§mtaAnst√§lld(anst√§lldId: number) {
  const userId = await getUserId();

  try {
    const client = await pool.connect();

    const query = `
      SELECT * FROM anst√§llda 
      WHERE id = $1 AND user_id = $2
    `;

    const result = await client.query(query, [anst√§lldId, userId]);
    if (result.rows.length === 0) {
      client.release();
      return null; // Ingen anst√§lld hittades
    }
    client.release();
    return result.rows[0] || null;
  } catch (error) {
    console.error("‚ùå h√§mtaAnst√§lld error:", error);
    return null;
  }
}

export async function sparaAnst√§lld(data: Anst√§lldData, anst√§lldId?: number | null) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  try {
    const client = await pool.connect();

    // Om anst√§lldId finns - UPPDATERA, annars SKAPA NY
    if (anst√§lldId) {
      // S√ÑKERHETSVALIDERING: Verifiera √§garskap
      const ownershipCheck = await client.query(
        "SELECT id FROM anst√§llda WHERE id = $1 AND user_id = $2",
        [anst√§lldId, userId]
      );

      if (ownershipCheck.rows.length === 0) {
        client.release();
        logPersonalDataEvent(
          "violation",
          userId,
          `Attempted to update unauthorized employee ${anst√§lldId}`
        );
        return {
          success: false,
          error: "S√§kerhetsfel: Otill√•ten √•tkomst till anst√§lld",
        };
      }

      // UPPDATERA befintlig anst√§lld med krypterad data
      const updateQuery = `
        UPDATE anst√§llda SET
          f√∂rnamn = $1, efternamn = $2, personnummer = $3, jobbtitel = $4, mail = $5,
          clearingnummer = $6, bankkonto = $7, adress = $8, postnummer = $9, ort = $10,
          startdatum = $11, slutdatum = $12, anst√§llningstyp = $13, l√∂neperiod = $14, ers√§ttning_per = $15,
          kompensation = $16, arbetsvecka_timmar = $17, arbetsbelastning = $18, deltid_procent = $19,
          tj√§nstest√§lle_adress = $20, tj√§nstest√§lle_ort = $21,
          skattetabell = $22, skattekolumn = $23,
          uppdaterad = NOW()
        WHERE id = $24 AND user_id = $25
        RETURNING id
      `;

      const values = [
        data.f√∂rnamn || null,
        data.efternamn || null,
        data.personnummer,
        data.jobbtitel || null,
        data.mail || null,
        data.clearingnummer || null,
        data.bankkonto || null,
        data.adress || null,
        data.postnummer || null,
        data.ort || null,
        data.startdatum || null,
        data.slutdatum || null,
        data.anst√§llningstyp || null,
        data.l√∂neperiod || null,
        data.ers√§ttningPer || null,
        data.kompensation ? parseFloat(data.kompensation) : null,
        data.arbetsvecka ? parseInt(data.arbetsvecka, 10) : null,
        data.arbetsbelastning || null,
        data.deltidProcent ? parseInt(data.deltidProcent, 10) : null,
        data.tj√§nstest√§lleAdress || null,
        data.tj√§nstest√§lleOrt || null,
        data.skattetabell ? parseInt(data.skattetabell, 10) : null,
        data.skattekolumn ? parseInt(data.skattekolumn, 10) : null,
        anst√§lldId,
        userId,
      ];

      await client.query(updateQuery, values);
      client.release();
      revalidatePath("/personal");

      return {
        success: true,
        id: anst√§lldId,
        message: "Anst√§lld uppdaterad!",
      };
    } else {
      // SKAPA NY anst√§lld
      const insertQuery = `
        INSERT INTO anst√§llda (
          f√∂rnamn, efternamn, personnummer, jobbtitel, mail,
          clearingnummer, bankkonto, adress, postnummer, ort,
          startdatum, slutdatum, anst√§llningstyp, l√∂neperiod, ers√§ttning_per,
          kompensation, arbetsvecka_timmar, arbetsbelastning, deltid_procent,
          tj√§nstest√§lle_adress, tj√§nstest√§lle_ort,
          skattetabell, skattekolumn,
          user_id
        ) VALUES (
          $1, $2, $3, $4, $5,
          $6, $7, $8, $9, $10,
          $11, $12, $13, $14, $15,
          $16, $17, $18, $19,
          $20, $21,
          $22, $23, $24
        ) RETURNING id
      `;

      const values = [
        data.f√∂rnamn || null,
        data.efternamn || null,
        data.personnummer,
        data.jobbtitel || null,
        data.mail || null,
        data.clearingnummer || null,
        data.bankkonto || null,
        data.adress || null,
        data.postnummer || null,
        data.ort || null,
        data.startdatum || null,
        data.slutdatum || null,
        data.anst√§llningstyp || null,
        data.l√∂neperiod || null,
        data.ers√§ttningPer || null,
        data.kompensation ? parseFloat(data.kompensation) : null,
        data.arbetsvecka ? parseInt(data.arbetsvecka, 10) : null,
        data.arbetsbelastning || null,
        data.deltidProcent ? parseInt(data.deltidProcent, 10) : null,
        data.tj√§nstest√§lleAdress || null,
        data.tj√§nstest√§lleOrt || null,
        data.skattetabell ? parseInt(data.skattetabell, 10) : null,
        data.skattekolumn ? parseInt(data.skattekolumn, 10) : null,
        userId,
      ];

      const result = await client.query(insertQuery, values);
      const nyAnst√§lldId = result.rows[0].id;

      client.release();
      revalidatePath("/personal");

      return {
        success: true,
        id: nyAnst√§lldId,
        message: "Anst√§lld sparad!",
      };
    }
  } catch (error) {
    console.error("‚ùå sparaAnst√§lld error:", error);
    return {
      success: false,
      error: "Kunde inte spara anst√§lld: " + (error instanceof Error ? error.message : "Ok√§nt fel"),
    };
  }
}

export async function taBortAnst√§lld(anst√§lldId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  // S√ÑKERHETSVALIDERING: Rate limiting f√∂r GDPR-kritisk borttagning
  if (!validateSessionAttempt(`hr-delete-${userId}`)) {
    logPersonalDataEvent(
      "violation",
      userId,
      "Rate limit exceeded for employee deletion operation"
    );
    return {
      success: false,
      error: "F√∂r m√•nga f√∂rfr√•gningar. F√∂rs√∂k igen om 15 minuter.",
    };
  }

  logPersonalDataEvent("delete", userId, `Attempting to delete employee ${anst√§lldId}`);

  try {
    const client = await pool.connect();

    const query = `
      DELETE FROM anst√§llda 
      WHERE id = $1 AND user_id = $2
    `;

    const result = await client.query(query, [anst√§lldId, userId]);
    console.log("‚úÖ Anst√§lld borttagen:", result.rowCount);

    client.release();
    revalidatePath("/personal");

    return {
      success: true,
      message: "Anst√§lld borttagen!",
    };
  } catch (error) {
    console.error("‚ùå taBortAnst√§lld error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Ett fel uppstod",
    };
  }
}

export async function h√§mtaF√∂retagsprofil(userId: string): Promise<any | null> {
  try {
    const { rows } = await pool.query(
      `
      SELECT
        f√∂retagsnamn,
        adress,
        postnummer,
        stad,
        organisationsnummer,
        momsregistreringsnummer,
        telefonnummer,
        epost,
        webbplats
      FROM f√∂retagsprofil
      WHERE id = $1
      LIMIT 1
      `,
      [userId]
    );

    return rows[0] || null;
  } catch (error) {
    console.error("Fel vid h√§mtning av f√∂retagsprofil:", error);
    return null;
  }
}

export async function h√§mtaSemesterTransaktioner(anst√§lldId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att anst√§lld tillh√∂r anv√§ndaren
    const checkQuery = `
      SELECT id FROM anst√§llda 
      WHERE id = $1 AND user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [anst√§lldId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      return [];
    }

    const query = `
      SELECT betalda_dagar, sparade_dagar, skuld, komp_dagar, bokf√∂rd
      FROM semester
      WHERE anst√§lld_id = $1
    `;
    const result = await client.query(query, [anst√§lldId]);
    client.release();
    return result.rows;
  } catch (error) {
    console.error("‚ùå h√§mtaSemesterTransaktioner error:", error);
    return [];
  }
}

export async function sparaSemesterTransaktion(data: {
  anst√§lldId: number;
  nyttV√§rde: number;
  kolumn: "betalda_dagar" | "sparade_dagar" | "skuld" | "komp_dagar";
}) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();
    // UPDATE
    const updateQuery = `
      UPDATE semester
      SET ${data.kolumn} = $1, bokf√∂rd = FALSE, uppdaterad = NOW()
      WHERE anst√§lld_id = $2
      RETURNING id
    `;
    const updateResult = await client.query(updateQuery, [data.nyttV√§rde, data.anst√§lldId]);
    console.log("sparaSemesterTransaktion: updateResult", updateResult.rows);
    let id = updateResult.rows[0]?.id;
    if (!id) {
      // Ingen rad uppdaterad, skapa en ny rad med r√§tt v√§rde
      let betalda_dagar = 0,
        sparade_dagar = 0,
        skuld = 0,
        komp_dagar = 0;
      switch (data.kolumn) {
        case "betalda_dagar":
          betalda_dagar = data.nyttV√§rde;
          break;
        case "sparade_dagar":
          sparade_dagar = data.nyttV√§rde;
          break;
        case "skuld":
          skuld = data.nyttV√§rde;
          break;
        case "komp_dagar":
          komp_dagar = data.nyttV√§rde;
          break;
      }
      const insertQuery = `
        INSERT INTO semester (
          anst√§lld_id, betalda_dagar, sparade_dagar, skuld, komp_dagar, bokf√∂rd
        ) VALUES (
          $1, $2, $3, $4, $5, FALSE
        ) RETURNING id
      `;
      const insertResult = await client.query(insertQuery, [
        data.anst√§lldId,
        betalda_dagar,
        sparade_dagar,
        skuld,
        komp_dagar,
      ]);
      id = insertResult.rows[0]?.id;
      console.log("sparaSemesterTransaktion: insertResult", insertResult.rows);
    }
    client.release();
    revalidatePath("/personal");
    return {
      success: true,
      id,
      message: "Semesterf√§lt uppdaterat!",
    };
  } catch (error) {
    console.error("‚ùå sparaSemesterTransaktion error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Ett fel uppstod vid sparande",
    };
  }
}

export async function raderaSemesterTransaktion(transaktionId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att transaktionen tillh√∂r anv√§ndarens anst√§lld
    const checkQuery = `
      SELECT s.id FROM semester s
      JOIN anst√§llda a ON s.anst√§lld_id = a.id
      WHERE s.id = $1 AND a.user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [transaktionId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      return { success: false, error: "Transaktion inte hittad" };
    }

    const deleteQuery = `DELETE FROM semester WHERE id = $1`;
    await client.query(deleteQuery, [transaktionId]);

    client.release();
    revalidatePath("/personal");

    return {
      success: true,
      message: "Semestertransaktion borttagen!",
    };
  } catch (error) {
    console.error("‚ùå raderaSemesterTransaktion error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Ett fel uppstod",
    };
  }
}

export async function uppdateraSemesterdata(
  anst√§lldId: number,
  data: {
    semesterdagarPer√Ör?: number;
    kvarandeDagar?: number;
    sparadeDagar?: number;
    anv√§ndaF√∂rskott?: number;
    kvarandeF√∂rskott?: number;
    innest√•ende?: number;
  }
) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    const updateQuery = `
      UPDATE anst√§llda SET
        semesterdagar_per_√•r = $1,
        kvarvarande_dagar = $2,
        sparade_dagar = $3,
        anv√§nda_f√∂rskott = $4,
        kvarvarande_f√∂rskott = $5,
        innest√•ende_ers√§ttning = $6,
        uppdaterad = NOW()
      WHERE id = $7 AND user_id = $8
      RETURNING id
    `;

    const values = [
      data.semesterdagarPer√Ör || 0,
      data.kvarandeDagar || 0,
      data.sparadeDagar || 0,
      data.anv√§ndaF√∂rskott || 0,
      data.kvarandeF√∂rskott || 0,
      data.innest√•ende || 0,
      anst√§lldId,
      userId,
    ];

    const result = await client.query(updateQuery, values);

    if (result.rowCount === 0) {
      client.release();
      return { success: false, error: "Anst√§lld inte hittad" };
    }

    client.release();
    revalidatePath("/personal");

    return {
      success: true,
      message: "Semesterdata uppdaterad!",
    };
  } catch (error) {
    console.error("‚ùå uppdateraSemesterdata error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Ett fel uppstod",
    };
  }
}

export async function h√§mtaL√∂nespecifikationer(anst√§lldId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att anst√§lld tillh√∂r anv√§ndaren
    const checkQuery = `
      SELECT id FROM anst√§llda 
      WHERE id = $1 AND user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [anst√§lldId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      return [];
    }

    // H√§mta l√∂nespecifikationer
    const l√∂nespecQuery = `
      SELECT * FROM l√∂nespecifikationer 
      WHERE anst√§lld_id = $1 
      ORDER BY skapad DESC
    `;
    const l√∂nespecResult = await client.query(l√∂nespecQuery, [anst√§lldId]);

    // ‚úÖ LADDA EXTRARADER F√ñR VARJE L√ñNESPEC
    const l√∂nespecarMedExtrarader = await Promise.all(
      l√∂nespecResult.rows.map(async (l√∂nespec) => {
        try {
          const extraradQuery = `
            SELECT * FROM l√∂nespec_extrarader 
            WHERE l√∂nespecifikation_id = $1 
            ORDER BY id
          `;
          const extraradResult = await client.query(extraradQuery, [l√∂nespec.id]);

          return {
            ...l√∂nespec,
            extrarader: extraradResult.rows,
          };
        } catch (error) {
          console.error("‚ùå Fel vid laddning av extrarader f√∂r l√∂nespec", l√∂nespec.id, error);
          return {
            ...l√∂nespec,
            extrarader: [],
          };
        }
      })
    );

    client.release();

    return l√∂nespecarMedExtrarader;
  } catch (error) {
    console.error("‚ùå h√§mtaL√∂nespecifikationer error:", error);
    return [];
  }
}

export async function h√§mtaUtl√§gg(anst√§lldId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att anst√§lld tillh√∂r anv√§ndaren
    const checkQuery = `
      SELECT id FROM anst√§llda 
      WHERE id = $1 AND user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [anst√§lldId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      return [];
    }

    const query = `
      SELECT 
        u.id,
        u.anst√§lld_id,
        u.user_id,
        u.status,
        u.skapad,
        u.uppdaterad,
        u.transaktion_id,
        COALESCE(t.belopp, 0) as belopp,
        COALESCE(t.kontobeskrivning, 'Utl√§gg') as beskrivning,
        COALESCE(t.transaktionsdatum::text, u.skapad::date::text) as datum,
        COALESCE(t.kommentar, '') as kategori,
        t.fil as kvitto_fil
      FROM utl√§gg u 
      LEFT JOIN transaktioner t ON u.transaktion_id = t.id
      WHERE u.anst√§lld_id = $1 
      ORDER BY u.skapad DESC
    `;

    const result = await client.query(query, [anst√§lldId]);

    console.log(`üîç h√§mtaUtl√§gg f√∂r anst√§lld ${anst√§lldId}:`, result.rows);

    client.release();
    return result.rows;
  } catch (error) {
    console.error("‚ùå h√§mtaUtl√§gg error:", error);
    return [];
  }
}

export async function sparaExtrarad(data: ExtraradData): Promise<ExtraradResult> {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  try {
    const client = await pool.connect();

    const insertQuery = `
      INSERT INTO l√∂nespec_extrarader (
        l√∂nespecifikation_id, typ, kolumn1, kolumn2, kolumn3, kolumn4
      ) VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING *
    `;

    const values = [
      data.l√∂nespecifikation_id,
      data.typ || null,
      data.kolumn1 || null,
      data.kolumn2 || null,
      data.kolumn3 || null,
      data.kolumn4 || null,
    ];

    const result = await client.query(insertQuery, values);

    client.release();
    revalidatePath("/personal");

    return { success: true, data: result.rows[0] };
  } catch (error) {
    console.error("‚ùå sparaExtrarad error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Ett fel uppstod",
    };
  }
}

export async function uppdateraUtl√§ggStatus(utl√§ggId: number, status: string) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  try {
    const client = await pool.connect();

    const updateQuery = `
      UPDATE utl√§gg SET status = $1, uppdaterad = NOW() 
      WHERE id = $2
    `;

    await client.query(updateQuery, [status, utl√§ggId]);
    client.release();

    return { success: true };
  } catch (error) {
    console.error("‚ùå uppdateraUtl√§ggStatus error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Ett fel uppstod",
    };
  }
}

export async function h√§mtaExtrarader(l√∂nespecifikation_id: number) {
  try {
    const client = await pool.connect();
    const result = await client.query(
      `SELECT * FROM l√∂nespec_extrarader WHERE l√∂nespecifikation_id = $1`,
      [l√∂nespecifikation_id]
    );
    client.release();
    return result.rows;
  } catch (error) {
    console.error("‚ùå h√§mtaExtrarader error:", error);
    return [];
  }
}

export async function l√§ggTillUtl√§ggIL√∂nespec(l√∂nespecId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  try {
    const client = await pool.connect();

    // H√§mta l√∂nespec och anst√§lld info
    const l√∂nespecQuery = `
      SELECT l.*, a.id as anst√§lld_id 
      FROM l√∂nespecifikationer l
      JOIN anst√§llda a ON l.anst√§lld_id = a.id
      WHERE l.id = $1 AND a.user_id = $2
    `;
    const l√∂nespecResult = await client.query(l√∂nespecQuery, [l√∂nespecId, userId]);

    if (l√∂nespecResult.rows.length === 0) {
      client.release();
      return { success: false, error: "L√∂nespec not found" };
    }

    const anst√§lldId = l√∂nespecResult.rows[0].anst√§lld_id;

    // H√§mta v√§ntande utl√§gg f√∂r anst√§lld
    const utl√§ggQuery = `
      SELECT 
        u.*, 
        t.belopp,
        t.kontobeskrivning as beskrivning,
        t.transaktionsdatum as datum
      FROM utl√§gg u 
      LEFT JOIN transaktioner t ON u.transaktion_id = t.id
      WHERE u.anst√§lld_id = $1 AND u.status = 'V√§ntande'
      ORDER BY u.skapad DESC
    `;

    const utl√§ggResult = await client.query(utl√§ggQuery, [anst√§lldId]);

    // DEBUG: Logga vad vi f√•r fr√•n databasen
    // L√§gg till varje utl√§gg som extrarad
    for (const utl√§gg of utl√§ggResult.rows) {
      const insertQuery = `
        INSERT INTO l√∂nespec_extrarader (
          l√∂nespecifikation_id, typ, kolumn1, kolumn2, kolumn3, kolumn4
        ) VALUES ($1, $2, $3, $4, $5, $6)
      `;

      const values = [
        l√∂nespecId,
        "utl√§gg",
        utl√§gg.beskrivning || "Utl√§gg",
        utl√§gg.belopp || 0,
        "",
        `Utl√§gg ID: ${utl√§gg.id}`,
      ];

      await client.query(insertQuery, values);

      // Uppdatera utl√§gg status
      const updateUtl√§ggQuery = `
        UPDATE utl√§gg SET status = 'Inkluderat i l√∂nespec' WHERE id = $1
      `;
      await client.query(updateUtl√§ggQuery, [utl√§gg.id]);
    }

    client.release();

    return { success: true, count: utl√§ggResult.rows.length };
  } catch (error) {
    console.error("‚ùå l√§ggTillUtl√§ggIL√∂nespec error:", error);
    return { success: false, error: error instanceof Error ? error.message : String(error) };
  }
}

export async function taBortExtrarad(extraradId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  try {
    const client = await pool.connect();

    const query = `
      DELETE FROM l√∂nespec_extrarader 
      WHERE id = $1
    `;

    const result = await client.query(query, [extraradId]);

    client.release();

    // ‚úÖ L√ÑGG TILL DENNA RAD F√ñR ATT UPPDATERA BOKF√ñRINGEN!
    revalidatePath("/personal");

    return { success: true };
  } catch (error) {
    console.error("‚ùå taBortExtrarad error:", error);
    throw error;
  }
}

export async function skapaNyL√∂nespec(data: {
  anst√§lld_id: number;
  utbetalningsdatum: string; // YYYY-MM-DD
}) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  // S√ÑKERHETSVALIDERING: Rate limiting f√∂r k√§nslig l√∂nedata
  if (!validateSessionAttempt(`hr-salary-${userId}`)) {
    logPersonalDataEvent(
      "violation",
      userId,
      "Rate limit exceeded for salary specification creation"
    );
    return {
      success: false,
      error: "F√∂r m√•nga f√∂rfr√•gningar. F√∂rs√∂k igen om 15 minuter.",
    };
  }

  logPersonalDataEvent(
    "modify",
    userId,
    `Creating salary specification for employee ${data.anst√§lld_id}`
  );

  try {
    const client = await pool.connect();

    // H√§mta anst√§lld fr√•n databas
    const anst√§lldQuery = `SELECT kompensation FROM anst√§llda WHERE id = $1 AND user_id = $2`;
    const anst√§lldResult = await client.query(anst√§lldQuery, [data.anst√§lld_id, userId]);

    if (anst√§lldResult.rows.length === 0) {
      client.release();
      return { success: false, error: "Anst√§lld hittades inte" };
    }

    const anst√§lld = anst√§lldResult.rows[0];

    // Kontrollera duplicat
    const existsQuery = `SELECT id FROM l√∂nespecifikationer WHERE anst√§lld_id = $1 AND utbetalningsdatum = $2`;
    const existsResult = await client.query(existsQuery, [
      data.anst√§lld_id,
      data.utbetalningsdatum,
    ]);

    if (existsResult.rows.length > 0) {
      client.release();
      return {
        success: false,
        error: `L√∂nespecifikation f√∂r ${data.utbetalningsdatum} finns redan`,
      };
    }

    // ‚úÖ ANV√ÑND KOMPENSATION DIREKT FR√ÖN ANST√ÑLLD - INGA BER√ÑKNINGAR!
    const grundl√∂n = parseFloat(anst√§lld.kompensation || "0");

    const insertQuery = `
      INSERT INTO l√∂nespecifikationer (
        anst√§lld_id, utbetalningsdatum,
        grundl√∂n, bruttol√∂n, skatt, sociala_avgifter, nettol√∂n,
        skapad_av
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *
    `;

    const insertResult = await client.query(insertQuery, [
      data.anst√§lld_id,
      data.utbetalningsdatum,
      grundl√∂n,
      grundl√∂n,
      0,
      0,
      grundl√∂n,
      userId,
    ]);

    client.release();

    return insertResult.rows[0];
  } catch (error) {
    console.error("‚ùå skapaNyL√∂nespec error:", error);
    throw new Error("Kunde inte skapa l√∂nespecifikation");
  }
}

export async function taBortL√∂nespec(l√∂nespecId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att l√∂nespec tillh√∂r anv√§ndarens anst√§lld
    const checkQuery = `
      SELECT l.id FROM l√∂nespecifikationer l
      JOIN anst√§llda a ON l.anst√§lld_id = a.id
      WHERE l.id = $1 AND a.user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [l√∂nespecId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      throw new Error("L√∂nespec inte hittad");
    }

    const deleteQuery = `
      DELETE FROM l√∂nespecifikationer 
      WHERE id = $1
    `;

    const result = await client.query(deleteQuery, [l√∂nespecId]);

    client.release();
    revalidatePath("/personal");

    return { success: true, message: "L√∂nespec borttagen!" };
  } catch (error) {
    console.error("‚ùå taBortL√∂nespec error:", error);
    throw error;
  }
}

export async function bokf√∂rSemester({
  userId,
  rader,
  kommentar,
  datum,
}: {
  userId: number;
  rader: { kontobeskrivning: string; belopp: number }[];
  kommentar?: string;
  datum?: string;
}) {
  const loggedInUserId = await getUserId();
  if (!loggedInUserId) throw new Error("Ingen inloggad anv√§ndare");
  const realUserId = loggedInUserId; // Alltid inloggad anv√§ndare

  try {
    const client = await pool.connect();
    const transaktionsdatum = datum || new Date().toISOString();

    // Skapa huvudtransaktion
    const huvudBeskrivning = "Semestertransaktion";
    const insertTransaktion = await client.query(
      `INSERT INTO transaktioner ("transaktionsdatum", "kontobeskrivning", "kommentar", "user_id")
       VALUES ($1, $2, $3, $4) RETURNING id`,
      [transaktionsdatum, huvudBeskrivning, kommentar || null, realUserId]
    );
    const transaktionsId = insertTransaktion.rows[0].id;

    // L√§gg till varje rad i transaktionsposter
    for (const rad of rader) {
      // Extrahera kontonummer ur kontobeskrivning (t.ex. "2920 Upplupna semesterl√∂ner")
      const kontoMatch = rad.kontobeskrivning.match(/^(\d+)/);
      const kontonummer = kontoMatch ? kontoMatch[1] : null;
      if (!kontonummer)
        throw new Error(`Kunde inte extrahera kontonummer ur beskrivning: ${rad.kontobeskrivning}`);
      // Sl√• upp id i konton-tabellen
      const kontoRes = await client.query("SELECT id FROM konton WHERE kontonummer = $1", [
        kontonummer,
      ]);
      if (kontoRes.rows.length === 0)
        throw new Error(`Kontonummer ${kontonummer} finns ej i konton-tabellen!`);
      const konto_id = kontoRes.rows[0].id;
      const debet = rad.belopp > 0 ? rad.belopp : 0;
      const kredit = rad.belopp < 0 ? -rad.belopp : 0;
      await client.query(
        `INSERT INTO transaktionsposter (transaktions_id, konto_id, debet, kredit)
         VALUES ($1, $2, $3, $4)`,
        [transaktionsId, konto_id, debet, kredit]
      );
    }

    client.release();
    revalidatePath("/personal");
    return { success: true, message: "Bokf√∂ringsrader sparade!" };
  } catch (error) {
    console.error("‚ùå bokf√∂rSemester error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Ett fel uppstod" };
  }
}

// H√§mta transaktionsposter f√∂r en transaktion (utl√§gg)
export async function hamtaTransaktionsposter(transaktionsId: number) {
  const userId = await getUserId();
  if (!userId) throw new Error("Ingen anv√§ndare inloggad");

  const client = await pool.connect();
  try {
    const result = await client.query(
      `SELECT tp.*, k.kontonummer, k.beskrivning
       FROM transaktionsposter tp
       JOIN konton k ON tp.konto_id = k.id
       WHERE tp.transaktions_id = $1
       ORDER BY tp.id`,
      [transaktionsId]
    );
    return result.rows;
  } finally {
    client.release();
  }
}

export async function h√§mtaAllaL√∂nespecarF√∂rUser() {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }
  // userId already a number from getUserId()
  try {
    const client = await pool.connect();
    const query = `
      SELECT l.*
      FROM l√∂nespecifikationer l
      JOIN anst√§llda a ON l.anst√§lld_id = a.id
      WHERE a.user_id = $1
      ORDER BY l.utbetalningsdatum DESC, l.skapad DESC
    `;
    const result = await client.query(query, [userId]);
    client.release();
    return result.rows;
  } catch (error) {
    console.error("‚ùå h√§mtaAllaL√∂nespecarF√∂rUser error:", error);
    return [];
  }
}

export async function h√§mtaUtbetalningsdatumLista() {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }
  // userId already a number from getUserId()
  try {
    const client = await pool.connect();
    const query = `
      SELECT DISTINCT l.utbetalningsdatum
      FROM l√∂nespecifikationer l
      JOIN anst√§llda a ON l.anst√§lld_id = a.id
      WHERE a.user_id = $1
      ORDER BY l.utbetalningsdatum DESC
    `;
    const result = await client.query(query, [userId]);
    client.release();
    // Returnera som array av datumstr√§ngar
    return result.rows.map((row) => row.utbetalningsdatum);
  } catch (error) {
    console.error("‚ùå h√§mtaUtbetalningsdatumLista error:", error);
    return [];
  }
}

export async function sparaUtl√§gg({
  belopp,
  datum,
  beskrivning,
  kategori,
  anst√§lld_id,
  kvitto_fil,
  kvitto_filtyp,
}: {
  belopp: number;
  datum: string;
  beskrivning: string;
  kategori?: string;
  anst√§lld_id: number;
  kvitto_fil?: string;
  kvitto_filtyp?: string;
}) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }
  // userId already a number from getUserId()
  try {
    const client = await pool.connect();
    const query = `
      INSERT INTO utl√§gg (
        belopp, datum, beskrivning, kategori, anst√§lld_id, user_id, kvitto_fil, kvitto_filtyp, skapad, uppdaterad
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW()
      ) RETURNING id
    `;
    const values = [
      belopp,
      datum,
      beskrivning,
      kategori || null,
      anst√§lld_id,
      userId,
      kvitto_fil || null,
      kvitto_filtyp || null,
    ];
    const result = await client.query(query, values);
    client.release();
    revalidatePath("/personal/utlagg");
    return { success: true, id: result.rows[0].id };
  } catch (error) {
    console.error("‚ùå sparaUtl√§gg error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Ett fel uppstod" };
  }
}

export async function taBortUtl√§gg(utl√§ggId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }
  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att utl√§gget tillh√∂r anv√§ndaren
    const checkQuery = `
      SELECT u.id, u.transaktion_id, a.user_id 
      FROM utl√§gg u 
      JOIN anst√§llda a ON u.anst√§lld_id = a.id 
      WHERE u.id = $1 AND a.user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [utl√§ggId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      throw new Error("Utl√§gg hittades inte eller tillh√∂r inte dig");
    }

    const utl√§gg = checkResult.rows[0];

    // Ta bort utl√§gg-posten
    await client.query("DELETE FROM utl√§gg WHERE id = $1", [utl√§ggId]);

    // Om det finns en kopplad transaktion, ta bort den ocks√•
    if (utl√§gg.transaktion_id) {
      // Ta bort transaktionsposter f√∂rst (foreign key constraint)
      await client.query("DELETE FROM transaktionsposter WHERE transaktions_id = $1", [
        utl√§gg.transaktion_id,
      ]);
      // Ta bort transaktionen
      await client.query("DELETE FROM transaktioner WHERE id = $1", [utl√§gg.transaktion_id]);
    }

    client.release();
    return { success: true };
  } catch (error) {
    console.error("‚ùå taBortUtl√§gg error:", error);
    throw error;
  }
}

export async function h√§mtaBetaldaSemesterdagar(anst√§lldId: number) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // Kontrollera att anst√§lld tillh√∂r anv√§ndaren
    const checkQuery = `
      SELECT id FROM anst√§llda 
      WHERE id = $1 AND user_id = $2
    `;
    const checkResult = await client.query(checkQuery, [anst√§lldId, userId]);

    if (checkResult.rows.length === 0) {
      client.release();
      return 0;
    }

    // H√§mta betalda semesterdagar fr√•n semester-tabellen
    const query = `
      SELECT betalda_dagar FROM semester 
      WHERE anst√§lld_id = $1 
      ORDER BY skapad DESC 
      LIMIT 1
    `;

    const result = await client.query(query, [anst√§lldId]);
    client.release();

    if (result.rows.length > 0) {
      return parseInt(result.rows[0].betalda_dagar) || 0;
    }

    return 0;
  } catch (error) {
    console.error("‚ùå h√§mtaBetaldaSemesterdagar error:", error);
    return 0;
  }
}

export async function bokf√∂rL√∂neskatter({
  socialaAvgifter,
  personalskatt,
  datum,
  kommentar,
}: {
  socialaAvgifter: number;
  personalskatt: number;
  datum?: string;
  kommentar?: string;
}) {
  const userId = await getUserId();
  if (!userId) throw new Error("Ingen inloggad anv√§ndare");
  const realUserId = userId;

  try {
    const client = await pool.connect();
    const transaktionsdatum = datum || new Date().toISOString();

    // Skapa huvudtransaktion f√∂r sociala avgifter
    const socialTransaktion = await client.query(
      `INSERT INTO transaktioner ("transaktionsdatum", "kontobeskrivning", "kommentar", "user_id")
       VALUES ($1, $2, $3, $4) RETURNING id`,
      [
        transaktionsdatum,
        "Bokf√∂ring av sociala avgifter",
        kommentar || "Automatisk bokf√∂ring fr√•n l√∂nek√∂rning",
        realUserId,
      ]
    );
    const socialTransaktionsId = socialTransaktion.rows[0].id;

    // Sociala avgifter - transaktionsposter
    if (socialaAvgifter > 0) {
      // H√§mta konto-id f√∂r 1930 och 2731
      const konto1930 = await client.query("SELECT id FROM konton WHERE kontonummer = $1", [
        "1930",
      ]);
      const konto2731 = await client.query("SELECT id FROM konton WHERE kontonummer = $1", [
        "2731",
      ]);

      if (konto1930.rows.length === 0) throw new Error("Konto 1930 finns inte");
      if (konto2731.rows.length === 0) throw new Error("Konto 2731 finns inte");

      // 1930 F√∂retagskonto (kredit)
      await client.query(
        `INSERT INTO transaktionsposter (transaktions_id, konto_id, debet, kredit)
         VALUES ($1, $2, $3, $4)`,
        [socialTransaktionsId, konto1930.rows[0].id, 0, socialaAvgifter]
      );

      // 2731 Avr√§kning lagstadgade sociala avgifter (debet)
      await client.query(
        `INSERT INTO transaktionsposter (transaktions_id, konto_id, debet, kredit)
         VALUES ($1, $2, $3, $4)`,
        [socialTransaktionsId, konto2731.rows[0].id, socialaAvgifter, 0]
      );
    }

    // Skapa huvudtransaktion f√∂r personalskatt
    const skattTransaktion = await client.query(
      `INSERT INTO transaktioner ("transaktionsdatum", "kontobeskrivning", "kommentar", "user_id")
       VALUES ($1, $2, $3, $4) RETURNING id`,
      [
        transaktionsdatum,
        "Bokf√∂ring av personalskatt",
        kommentar || "Automatisk bokf√∂ring fr√•n l√∂nek√∂rning",
        realUserId,
      ]
    );
    const skattTransaktionsId = skattTransaktion.rows[0].id;

    // Personalskatt - transaktionsposter
    if (personalskatt > 0) {
      // H√§mta konto-id f√∂r 1930 och 2710
      const konto1930 = await client.query("SELECT id FROM konton WHERE kontonummer = $1", [
        "1930",
      ]);
      const konto2710 = await client.query("SELECT id FROM konton WHERE kontonummer = $1", [
        "2710",
      ]);

      if (konto1930.rows.length === 0) throw new Error("Konto 1930 finns inte");
      if (konto2710.rows.length === 0) throw new Error("Konto 2710 finns inte");

      // 1930 F√∂retagskonto (kredit)
      await client.query(
        `INSERT INTO transaktionsposter (transaktions_id, konto_id, debet, kredit)
         VALUES ($1, $2, $3, $4)`,
        [skattTransaktionsId, konto1930.rows[0].id, 0, personalskatt]
      );

      // 2710 Personalskatt (debet)
      await client.query(
        `INSERT INTO transaktionsposter (transaktions_id, konto_id, debet, kredit)
         VALUES ($1, $2, $3, $4)`,
        [skattTransaktionsId, konto2710.rows[0].id, personalskatt, 0]
      );
    }

    client.release();
    revalidatePath("/personal");
    revalidatePath("/historik");
    return { success: true, message: "L√∂neskatter bokf√∂rda!" };
  } catch (error) {
    console.error("‚ùå bokf√∂rL√∂neskatter error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Ett fel uppstod" };
  }
}

// L√∂neutbetalning bokf√∂ring
interface Bokf√∂ringsPost {
  konto: string;
  kontoNamn: string;
  debet: number;
  kredit: number;
  beskrivning: string;
}

interface Bokf√∂rL√∂neUtbetalningData {
  l√∂nespecId: number;
  extrarader: any[];
  ber√§knadeV√§rden: any;
  anst√§lldNamn: string;
  period: string;
  utbetalningsdatum: string;
  kommentar?: string;
  bokf√∂ringsPoster?: Bokf√∂ringsPost[];
}

/**
 * Bokf√∂r en l√∂neutbetalning genom att skapa en transaktion med tillh√∂rande transaktionsposter
 */
export async function bokf√∂rL√∂neutbetalning(data: Bokf√∂rL√∂neUtbetalningData) {
  const userId = await getUserId();
  if (!userId) {
    throw new Error("Ingen inloggad anv√§ndare");
  }

  // userId already a number from getUserId()

  try {
    const client = await pool.connect();

    // H√§mta l√∂nespecifikation f√∂r att s√§kerst√§lla att den tillh√∂r anv√§ndaren
    const l√∂nespecQuery = `
      SELECT l.*, a.f√∂rnamn, a.efternamn, a.kompensation
      FROM l√∂nespecifikationer l
      JOIN anst√§llda a ON l.anst√§lld_id = a.id
      WHERE l.id = $1 AND a.user_id = $2
    `;
    const l√∂nespecResult = await client.query(l√∂nespecQuery, [data.l√∂nespecId, userId]);

    if (l√∂nespecResult.rows.length === 0) {
      client.release();
      throw new Error("L√∂nespecifikation hittades inte");
    }

    const l√∂nespec = l√∂nespecResult.rows[0];

    // Kontrollera att l√∂nespec inte redan √§r bokf√∂rd
    if (l√∂nespec.status === "Utbetald") {
      client.release();
      throw new Error("L√∂nespecifikation √§r redan bokf√∂rd");
    }

    // S√§tt alltid status till 'Skapad' innan bokf√∂ring
    const updateL√∂nespecQueryReset = `
      UPDATE l√∂nespecifikationer 
      SET status = 'Skapad', uppdaterad = CURRENT_TIMESTAMP
      WHERE id = $1
    `;
    await client.query(updateL√∂nespecQueryReset, [data.l√∂nespecId]);

    // Anv√§nd bokf√∂ringsPoster direkt om den finns, annars generera som tidigare
    const bokf√∂ringsPoster =
      data.bokf√∂ringsPoster && Array.isArray(data.bokf√∂ringsPoster)
        ? data.bokf√∂ringsPoster
        : genereraBokf√∂ringsPoster(
            l√∂nespec,
            data.extrarader,
            data.ber√§knadeV√§rden,
            data.anst√§lldNamn
          );

    // Validera att bokf√∂ringen balanserar
    const totalDebet = bokf√∂ringsPoster.reduce((sum, post) => sum + post.debet, 0);
    const totalKredit = bokf√∂ringsPoster.reduce((sum, post) => sum + post.kredit, 0);

    if (Math.abs(totalDebet - totalKredit) > 0.01) {
      client.release();
      throw new Error(
        `Bokf√∂ringen balanserar inte! Debet: ${totalDebet.toFixed(2)}, Kredit: ${totalKredit.toFixed(2)}`
      );
    }

    // Skapa huvudtransaktion
    const transaktionQuery = `
      INSERT INTO transaktioner (
        transaktionsdatum, kontobeskrivning, belopp, kommentar, "user_id"
      ) VALUES ($1, $2, $3, $4, $5)
      RETURNING id
    `;

    const nettol√∂n = data.ber√§knadeV√§rden.nettol√∂n || l√∂nespec.nettol√∂n;
    const transaktionResult = await client.query(transaktionQuery, [
      new Date(data.utbetalningsdatum),
      `L√∂neutbetalning ${data.anst√§lldNamn} ${data.period}`,
      nettol√∂n,
      data.kommentar || `L√∂neutbetalning f√∂r ${data.anst√§lldNamn}, period ${data.period}`,
      userId,
    ]);

    const transaktionId = transaktionResult.rows[0].id;

    // Skapa transaktionsposter f√∂r varje bokf√∂ringspost
    const transaktionspostQuery = `
      INSERT INTO transaktionsposter (transaktions_id, konto_id, debet, kredit)
      VALUES ($1, $2, $3, $4)
    `;

    for (const post of bokf√∂ringsPoster) {
      post.debet = Number(post.debet) || 0;
      post.kredit = Number(post.kredit) || 0;
      if (post.debet === 0 && post.kredit === 0) {
        continue;
      }

      const kontoQuery = `SELECT id FROM konton WHERE kontonummer = $1`;
      const kontoResult = await client.query(kontoQuery, [post.konto]);
      if (kontoResult.rows.length === 0) {
        client.release();
        throw new Error(`Konto ${post.konto} (${post.kontoNamn}) hittades inte i databasen`);
      }
      const kontoId = kontoResult.rows[0].id;

      await client.query(transaktionspostQuery, [transaktionId, kontoId, post.debet, post.kredit]);
    }

    // Markera l√∂nespecifikation som utbetald
    const updateL√∂nespecQuery = `
      UPDATE l√∂nespecifikationer 
      SET status = 'Utbetald', uppdaterad = CURRENT_TIMESTAMP
      WHERE id = $1
    `;
    await client.query(updateL√∂nespecQuery, [data.l√∂nespecId]);

    client.release();

    revalidatePath("/personal");
    revalidatePath("/historik");
    revalidatePath("/rapporter");

    return {
      success: true,
      transaktionId,
      message: `L√∂neutbetalning bokf√∂rd f√∂r ${data.anst√§lldNamn}`,
      bokf√∂ringsPoster,
    };
  } catch (error) {
    console.error("‚ùå bokf√∂rL√∂neutbetalning error:", error);
    throw error;
  }
}

/**
 * Genererar bokf√∂ringsposter enligt samma logik som BokforLoner.tsx
 */
function genereraBokf√∂ringsPoster(
  l√∂nespec: any,
  extrarader: any[],
  ber√§knadeV√§rden: any,
  anst√§lldNamn: string
): Bokf√∂ringsPost[] {
  const poster: Bokf√∂ringsPost[] = [];

  const kontantl√∂n = Number(ber√§knadeV√§rden.kontantl√∂n || l√∂nespec.grundl√∂n);
  const skatt = Number(ber√§knadeV√§rden.skatt || l√∂nespec.skatt);

  // 1. Kontantl√∂n (7210)
  if (kontantl√∂n > 0) {
    poster.push({
      konto: "7210",
      kontoNamn: "L√∂ner till tj√§nstem√§n",
      debet: kontantl√∂n,
      kredit: 0,
      beskrivning: `Kontantl√∂n ${anst√§lldNamn}`,
    });
  }

  // 2. Sociala avgifter (7510)
  const socialaAvgifter = Math.round(kontantl√∂n * 0.3142);
  if (socialaAvgifter > 0) {
    poster.push({
      konto: "7510",
      kontoNamn: "Lagstadgade sociala avgifter",
      debet: socialaAvgifter,
      kredit: 0,
      beskrivning: `Sociala avgifter ${anst√§lldNamn}`,
    });
  }

  // 3. Skuld sociala avgifter (2731)
  if (socialaAvgifter > 0) {
    poster.push({
      konto: "2731",
      kontoNamn: "Skuld f√∂r sociala avgifter",
      debet: 0,
      kredit: socialaAvgifter,
      beskrivning: `Skuld sociala avgifter ${anst√§lldNamn}`,
    });
  }

  // 4. Prelimin√§r skatt (2710)
  if (skatt > 0) {
    poster.push({
      konto: "2710",
      kontoNamn: "Personalskatt",
      debet: 0,
      kredit: skatt,
      beskrivning: `Prelimin√§r skatt ${anst√§lldNamn}`,
    });
  }

  // 5. Nettol√∂n till utbetalning (1930)
  const nettol√∂n = kontantl√∂n - skatt;
  if (nettol√∂n > 0) {
    poster.push({
      konto: "1930",
      kontoNamn: "F√∂retagskonto/Bank",
      debet: 0,
      kredit: nettol√∂n,
      beskrivning: `Nettol√∂n utbetalning ${anst√§lldNamn}`,
    });
  }

  return poster;
}
